// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.1
// source: modbus.proto

package modbus

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type WordRegister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr    string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr"`
	Hex     string `protobuf:"bytes,2,opt,name=hex,proto3" json:"hex"`
	Ubint16 uint32 `protobuf:"varint,3,opt,name=ubint16,proto3" json:"ubint16"`
	Ulint16 uint32 `protobuf:"varint,4,opt,name=ulint16,proto3" json:"ulint16"`
	Sbint16 int32  `protobuf:"varint,5,opt,name=sbint16,proto3" json:"sbint16"`
	Slint16 int32  `protobuf:"varint,6,opt,name=slint16,proto3" json:"slint16"`
	Min     int32  `protobuf:"varint,7,opt,name=min,proto3" json:"min"`
	Max     int32  `protobuf:"varint,8,opt,name=max,proto3" json:"max"`
	Random  bool   `protobuf:"varint,9,opt,name=random,proto3" json:"random"`
}

func (x *WordRegister) Reset() {
	*x = WordRegister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WordRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WordRegister) ProtoMessage() {}

func (x *WordRegister) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WordRegister.ProtoReflect.Descriptor instead.
func (*WordRegister) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{0}
}

func (x *WordRegister) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *WordRegister) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

func (x *WordRegister) GetUbint16() uint32 {
	if x != nil {
		return x.Ubint16
	}
	return 0
}

func (x *WordRegister) GetUlint16() uint32 {
	if x != nil {
		return x.Ulint16
	}
	return 0
}

func (x *WordRegister) GetSbint16() int32 {
	if x != nil {
		return x.Sbint16
	}
	return 0
}

func (x *WordRegister) GetSlint16() int32 {
	if x != nil {
		return x.Slint16
	}
	return 0
}

func (x *WordRegister) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *WordRegister) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *WordRegister) GetRandom() bool {
	if x != nil {
		return x.Random
	}
	return false
}

type BitGroupRegister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr   string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr"`
	Hex    string `protobuf:"bytes,2,opt,name=hex,proto3" json:"hex"`
	Bit7   int32  `protobuf:"varint,3,opt,name=bit7,proto3" json:"bit7"`
	Bit6   int32  `protobuf:"varint,4,opt,name=bit6,proto3" json:"bit6"`
	Bit5   int32  `protobuf:"varint,5,opt,name=bit5,proto3" json:"bit5"`
	Bit4   int32  `protobuf:"varint,6,opt,name=bit4,proto3" json:"bit4"`
	Bit3   int32  `protobuf:"varint,7,opt,name=bit3,proto3" json:"bit3"`
	Bit2   int32  `protobuf:"varint,8,opt,name=bit2,proto3" json:"bit2"`
	Bit1   int32  `protobuf:"varint,9,opt,name=bit1,proto3" json:"bit1"`
	Bit0   int32  `protobuf:"varint,10,opt,name=bit0,proto3" json:"bit0"`
	Random bool   `protobuf:"varint,11,opt,name=random,proto3" json:"random"`
}

func (x *BitGroupRegister) Reset() {
	*x = BitGroupRegister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitGroupRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitGroupRegister) ProtoMessage() {}

func (x *BitGroupRegister) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitGroupRegister.ProtoReflect.Descriptor instead.
func (*BitGroupRegister) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{1}
}

func (x *BitGroupRegister) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *BitGroupRegister) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

func (x *BitGroupRegister) GetBit7() int32 {
	if x != nil {
		return x.Bit7
	}
	return 0
}

func (x *BitGroupRegister) GetBit6() int32 {
	if x != nil {
		return x.Bit6
	}
	return 0
}

func (x *BitGroupRegister) GetBit5() int32 {
	if x != nil {
		return x.Bit5
	}
	return 0
}

func (x *BitGroupRegister) GetBit4() int32 {
	if x != nil {
		return x.Bit4
	}
	return 0
}

func (x *BitGroupRegister) GetBit3() int32 {
	if x != nil {
		return x.Bit3
	}
	return 0
}

func (x *BitGroupRegister) GetBit2() int32 {
	if x != nil {
		return x.Bit2
	}
	return 0
}

func (x *BitGroupRegister) GetBit1() int32 {
	if x != nil {
		return x.Bit1
	}
	return 0
}

func (x *BitGroupRegister) GetBit0() int32 {
	if x != nil {
		return x.Bit0
	}
	return 0
}

func (x *BitGroupRegister) GetRandom() bool {
	if x != nil {
		return x.Random
	}
	return false
}

type Paging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index"`
	Size  int32 `protobuf:"varint,2,opt,name=size,proto3" json:"size"`
}

func (x *Paging) Reset() {
	*x = Paging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paging) ProtoMessage() {}

func (x *Paging) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paging.ProtoReflect.Descriptor instead.
func (*Paging) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{2}
}

func (x *Paging) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Paging) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type GetInputRegisterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*WordRegister `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Index int32           `protobuf:"varint,2,opt,name=index,proto3" json:"index"`
	Size  int32           `protobuf:"varint,3,opt,name=size,proto3" json:"size"`
	Total int32           `protobuf:"varint,4,opt,name=total,proto3" json:"total"`
}

func (x *GetInputRegisterResp) Reset() {
	*x = GetInputRegisterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInputRegisterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInputRegisterResp) ProtoMessage() {}

func (x *GetInputRegisterResp) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInputRegisterResp.ProtoReflect.Descriptor instead.
func (*GetInputRegisterResp) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{3}
}

func (x *GetInputRegisterResp) GetList() []*WordRegister {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetInputRegisterResp) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *GetInputRegisterResp) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetInputRegisterResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetHoldingRegisterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*WordRegister `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Index int32           `protobuf:"varint,2,opt,name=index,proto3" json:"index"`
	Size  int32           `protobuf:"varint,3,opt,name=size,proto3" json:"size"`
	Total int32           `protobuf:"varint,4,opt,name=total,proto3" json:"total"`
}

func (x *GetHoldingRegisterResp) Reset() {
	*x = GetHoldingRegisterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHoldingRegisterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHoldingRegisterResp) ProtoMessage() {}

func (x *GetHoldingRegisterResp) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHoldingRegisterResp.ProtoReflect.Descriptor instead.
func (*GetHoldingRegisterResp) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{4}
}

func (x *GetHoldingRegisterResp) GetList() []*WordRegister {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetHoldingRegisterResp) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *GetHoldingRegisterResp) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetHoldingRegisterResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetDiscreteInputResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*BitGroupRegister `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Index int32               `protobuf:"varint,2,opt,name=index,proto3" json:"index"`
	Size  int32               `protobuf:"varint,3,opt,name=size,proto3" json:"size"`
	Total int32               `protobuf:"varint,4,opt,name=total,proto3" json:"total"`
}

func (x *GetDiscreteInputResp) Reset() {
	*x = GetDiscreteInputResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiscreteInputResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiscreteInputResp) ProtoMessage() {}

func (x *GetDiscreteInputResp) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiscreteInputResp.ProtoReflect.Descriptor instead.
func (*GetDiscreteInputResp) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{5}
}

func (x *GetDiscreteInputResp) GetList() []*BitGroupRegister {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetDiscreteInputResp) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *GetDiscreteInputResp) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetDiscreteInputResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetCoilResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*BitGroupRegister `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Index int32               `protobuf:"varint,2,opt,name=index,proto3" json:"index"`
	Size  int32               `protobuf:"varint,3,opt,name=size,proto3" json:"size"`
	Total int32               `protobuf:"varint,4,opt,name=total,proto3" json:"total"`
}

func (x *GetCoilResp) Reset() {
	*x = GetCoilResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoilResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoilResp) ProtoMessage() {}

func (x *GetCoilResp) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoilResp.ProtoReflect.Descriptor instead.
func (*GetCoilResp) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{6}
}

func (x *GetCoilResp) GetList() []*BitGroupRegister {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetCoilResp) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *GetCoilResp) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetCoilResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetRTUAddrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetRTUAddrReq) Reset() {
	*x = GetRTUAddrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRTUAddrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRTUAddrReq) ProtoMessage() {}

func (x *GetRTUAddrReq) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRTUAddrReq.ProtoReflect.Descriptor instead.
func (*GetRTUAddrReq) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{7}
}

type GetRTUAddrResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addrs []string `protobuf:"bytes,1,rep,name=addrs,proto3" json:"addrs"`
}

func (x *GetRTUAddrResp) Reset() {
	*x = GetRTUAddrResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRTUAddrResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRTUAddrResp) ProtoMessage() {}

func (x *GetRTUAddrResp) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRTUAddrResp.ProtoReflect.Descriptor instead.
func (*GetRTUAddrResp) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{8}
}

func (x *GetRTUAddrResp) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

type GetTCPAddrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTCPAddrReq) Reset() {
	*x = GetTCPAddrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTCPAddrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTCPAddrReq) ProtoMessage() {}

func (x *GetTCPAddrReq) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTCPAddrReq.ProtoReflect.Descriptor instead.
func (*GetTCPAddrReq) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{9}
}

type GetTCPAddrResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addrs []string `protobuf:"bytes,1,rep,name=addrs,proto3" json:"addrs"`
}

func (x *GetTCPAddrResp) Reset() {
	*x = GetTCPAddrResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTCPAddrResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTCPAddrResp) ProtoMessage() {}

func (x *GetTCPAddrResp) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTCPAddrResp.ProtoReflect.Descriptor instead.
func (*GetTCPAddrResp) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{10}
}

func (x *GetTCPAddrResp) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

type GetTTYAddrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTTYAddrReq) Reset() {
	*x = GetTTYAddrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTTYAddrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTTYAddrReq) ProtoMessage() {}

func (x *GetTTYAddrReq) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTTYAddrReq.ProtoReflect.Descriptor instead.
func (*GetTTYAddrReq) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{11}
}

type TTYAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr     string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr"`
	Baud     int32  `protobuf:"varint,2,opt,name=baud,proto3" json:"baud"`
	Databits int32  `protobuf:"varint,3,opt,name=databits,proto3" json:"databits"`
	Stopbits int32  `protobuf:"varint,4,opt,name=stopbits,proto3" json:"stopbits"`
	Parity   string `protobuf:"bytes,5,opt,name=parity,proto3" json:"parity"`
	Timeout  int32  `protobuf:"varint,6,opt,name=timeout,proto3" json:"timeout"`
}

func (x *TTYAddr) Reset() {
	*x = TTYAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TTYAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TTYAddr) ProtoMessage() {}

func (x *TTYAddr) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TTYAddr.ProtoReflect.Descriptor instead.
func (*TTYAddr) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{12}
}

func (x *TTYAddr) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *TTYAddr) GetBaud() int32 {
	if x != nil {
		return x.Baud
	}
	return 0
}

func (x *TTYAddr) GetDatabits() int32 {
	if x != nil {
		return x.Databits
	}
	return 0
}

func (x *TTYAddr) GetStopbits() int32 {
	if x != nil {
		return x.Stopbits
	}
	return 0
}

func (x *TTYAddr) GetParity() string {
	if x != nil {
		return x.Parity
	}
	return ""
}

func (x *TTYAddr) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type GetTTYAddrResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addrs []*TTYAddr `protobuf:"bytes,1,rep,name=addrs,proto3" json:"addrs"`
}

func (x *GetTTYAddrResp) Reset() {
	*x = GetTTYAddrResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTTYAddrResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTTYAddrResp) ProtoMessage() {}

func (x *GetTTYAddrResp) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTTYAddrResp.ProtoReflect.Descriptor instead.
func (*GetTTYAddrResp) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{13}
}

func (x *GetTTYAddrResp) GetAddrs() []*TTYAddr {
	if x != nil {
		return x.Addrs
	}
	return nil
}

type SetInputRegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr  string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr"`
	Field string `protobuf:"bytes,2,opt,name=field,proto3" json:"field"`
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value"`
}

func (x *SetInputRegisterReq) Reset() {
	*x = SetInputRegisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetInputRegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetInputRegisterReq) ProtoMessage() {}

func (x *SetInputRegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetInputRegisterReq.ProtoReflect.Descriptor instead.
func (*SetInputRegisterReq) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{14}
}

func (x *SetInputRegisterReq) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *SetInputRegisterReq) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SetInputRegisterReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SetInputRegisterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *WordRegister `protobuf:"bytes,1,opt,name=info,proto3" json:"info"`
}

func (x *SetInputRegisterResp) Reset() {
	*x = SetInputRegisterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetInputRegisterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetInputRegisterResp) ProtoMessage() {}

func (x *SetInputRegisterResp) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetInputRegisterResp.ProtoReflect.Descriptor instead.
func (*SetInputRegisterResp) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{15}
}

func (x *SetInputRegisterResp) GetInfo() *WordRegister {
	if x != nil {
		return x.Info
	}
	return nil
}

type SetInputRangeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr"`
	Min  int32  `protobuf:"varint,2,opt,name=min,proto3" json:"min"`
	Max  int32  `protobuf:"varint,3,opt,name=max,proto3" json:"max"`
}

func (x *SetInputRangeReq) Reset() {
	*x = SetInputRangeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetInputRangeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetInputRangeReq) ProtoMessage() {}

func (x *SetInputRangeReq) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetInputRangeReq.ProtoReflect.Descriptor instead.
func (*SetInputRangeReq) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{16}
}

func (x *SetInputRangeReq) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *SetInputRangeReq) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *SetInputRangeReq) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type SetInputRangeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *WordRegister `protobuf:"bytes,1,opt,name=info,proto3" json:"info"`
}

func (x *SetInputRangeResp) Reset() {
	*x = SetInputRangeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetInputRangeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetInputRangeResp) ProtoMessage() {}

func (x *SetInputRangeResp) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetInputRangeResp.ProtoReflect.Descriptor instead.
func (*SetInputRangeResp) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{17}
}

func (x *SetInputRangeResp) GetInfo() *WordRegister {
	if x != nil {
		return x.Info
	}
	return nil
}

type InputRegisterCtrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr   string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr"`
	Random bool   `protobuf:"varint,2,opt,name=random,proto3" json:"random"`
}

func (x *InputRegisterCtrlReq) Reset() {
	*x = InputRegisterCtrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputRegisterCtrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputRegisterCtrlReq) ProtoMessage() {}

func (x *InputRegisterCtrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputRegisterCtrlReq.ProtoReflect.Descriptor instead.
func (*InputRegisterCtrlReq) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{18}
}

func (x *InputRegisterCtrlReq) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *InputRegisterCtrlReq) GetRandom() bool {
	if x != nil {
		return x.Random
	}
	return false
}

type InputRegisterCtrlResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *WordRegister `protobuf:"bytes,1,opt,name=info,proto3" json:"info"`
}

func (x *InputRegisterCtrlResp) Reset() {
	*x = InputRegisterCtrlResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputRegisterCtrlResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputRegisterCtrlResp) ProtoMessage() {}

func (x *InputRegisterCtrlResp) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputRegisterCtrlResp.ProtoReflect.Descriptor instead.
func (*InputRegisterCtrlResp) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{19}
}

func (x *InputRegisterCtrlResp) GetInfo() *WordRegister {
	if x != nil {
		return x.Info
	}
	return nil
}

type SetHoldingRegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr  string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr"`
	Field string `protobuf:"bytes,2,opt,name=field,proto3" json:"field"`
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value"`
}

func (x *SetHoldingRegisterReq) Reset() {
	*x = SetHoldingRegisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHoldingRegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHoldingRegisterReq) ProtoMessage() {}

func (x *SetHoldingRegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHoldingRegisterReq.ProtoReflect.Descriptor instead.
func (*SetHoldingRegisterReq) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{20}
}

func (x *SetHoldingRegisterReq) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *SetHoldingRegisterReq) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SetHoldingRegisterReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SetHoldingRegisterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *WordRegister `protobuf:"bytes,1,opt,name=info,proto3" json:"info"`
}

func (x *SetHoldingRegisterResp) Reset() {
	*x = SetHoldingRegisterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHoldingRegisterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHoldingRegisterResp) ProtoMessage() {}

func (x *SetHoldingRegisterResp) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHoldingRegisterResp.ProtoReflect.Descriptor instead.
func (*SetHoldingRegisterResp) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{21}
}

func (x *SetHoldingRegisterResp) GetInfo() *WordRegister {
	if x != nil {
		return x.Info
	}
	return nil
}

type SetHoldingRangeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr"`
	Min  int32  `protobuf:"varint,2,opt,name=min,proto3" json:"min"`
	Max  int32  `protobuf:"varint,3,opt,name=max,proto3" json:"max"`
}

func (x *SetHoldingRangeReq) Reset() {
	*x = SetHoldingRangeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHoldingRangeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHoldingRangeReq) ProtoMessage() {}

func (x *SetHoldingRangeReq) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHoldingRangeReq.ProtoReflect.Descriptor instead.
func (*SetHoldingRangeReq) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{22}
}

func (x *SetHoldingRangeReq) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *SetHoldingRangeReq) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *SetHoldingRangeReq) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type SetHoldingRangeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *WordRegister `protobuf:"bytes,1,opt,name=info,proto3" json:"info"`
}

func (x *SetHoldingRangeResp) Reset() {
	*x = SetHoldingRangeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHoldingRangeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHoldingRangeResp) ProtoMessage() {}

func (x *SetHoldingRangeResp) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHoldingRangeResp.ProtoReflect.Descriptor instead.
func (*SetHoldingRangeResp) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{23}
}

func (x *SetHoldingRangeResp) GetInfo() *WordRegister {
	if x != nil {
		return x.Info
	}
	return nil
}

type HoldingRegisterCtrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr   string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr"`
	Random bool   `protobuf:"varint,2,opt,name=random,proto3" json:"random"`
}

func (x *HoldingRegisterCtrlReq) Reset() {
	*x = HoldingRegisterCtrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoldingRegisterCtrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldingRegisterCtrlReq) ProtoMessage() {}

func (x *HoldingRegisterCtrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldingRegisterCtrlReq.ProtoReflect.Descriptor instead.
func (*HoldingRegisterCtrlReq) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{24}
}

func (x *HoldingRegisterCtrlReq) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *HoldingRegisterCtrlReq) GetRandom() bool {
	if x != nil {
		return x.Random
	}
	return false
}

type HoldingRegisterCtrlResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *WordRegister `protobuf:"bytes,1,opt,name=info,proto3" json:"info"`
}

func (x *HoldingRegisterCtrlResp) Reset() {
	*x = HoldingRegisterCtrlResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoldingRegisterCtrlResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldingRegisterCtrlResp) ProtoMessage() {}

func (x *HoldingRegisterCtrlResp) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldingRegisterCtrlResp.ProtoReflect.Descriptor instead.
func (*HoldingRegisterCtrlResp) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{25}
}

func (x *HoldingRegisterCtrlResp) GetInfo() *WordRegister {
	if x != nil {
		return x.Info
	}
	return nil
}

type SetDiscreteInputReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr  string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr"`
	Field string `protobuf:"bytes,2,opt,name=field,proto3" json:"field"`
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value"`
}

func (x *SetDiscreteInputReq) Reset() {
	*x = SetDiscreteInputReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDiscreteInputReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDiscreteInputReq) ProtoMessage() {}

func (x *SetDiscreteInputReq) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDiscreteInputReq.ProtoReflect.Descriptor instead.
func (*SetDiscreteInputReq) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{26}
}

func (x *SetDiscreteInputReq) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *SetDiscreteInputReq) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SetDiscreteInputReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SetDiscreteInputResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *BitGroupRegister `protobuf:"bytes,1,opt,name=info,proto3" json:"info"`
}

func (x *SetDiscreteInputResp) Reset() {
	*x = SetDiscreteInputResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDiscreteInputResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDiscreteInputResp) ProtoMessage() {}

func (x *SetDiscreteInputResp) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDiscreteInputResp.ProtoReflect.Descriptor instead.
func (*SetDiscreteInputResp) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{27}
}

func (x *SetDiscreteInputResp) GetInfo() *BitGroupRegister {
	if x != nil {
		return x.Info
	}
	return nil
}

type DiscreteInputCtrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr   string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr"`
	Random bool   `protobuf:"varint,2,opt,name=random,proto3" json:"random"`
}

func (x *DiscreteInputCtrlReq) Reset() {
	*x = DiscreteInputCtrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscreteInputCtrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscreteInputCtrlReq) ProtoMessage() {}

func (x *DiscreteInputCtrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscreteInputCtrlReq.ProtoReflect.Descriptor instead.
func (*DiscreteInputCtrlReq) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{28}
}

func (x *DiscreteInputCtrlReq) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *DiscreteInputCtrlReq) GetRandom() bool {
	if x != nil {
		return x.Random
	}
	return false
}

type DiscreteInputCtrlResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *BitGroupRegister `protobuf:"bytes,1,opt,name=info,proto3" json:"info"`
}

func (x *DiscreteInputCtrlResp) Reset() {
	*x = DiscreteInputCtrlResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscreteInputCtrlResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscreteInputCtrlResp) ProtoMessage() {}

func (x *DiscreteInputCtrlResp) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscreteInputCtrlResp.ProtoReflect.Descriptor instead.
func (*DiscreteInputCtrlResp) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{29}
}

func (x *DiscreteInputCtrlResp) GetInfo() *BitGroupRegister {
	if x != nil {
		return x.Info
	}
	return nil
}

type SetCoilReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr  string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr"`
	Field string `protobuf:"bytes,2,opt,name=field,proto3" json:"field"`
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value"`
}

func (x *SetCoilReq) Reset() {
	*x = SetCoilReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCoilReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCoilReq) ProtoMessage() {}

func (x *SetCoilReq) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCoilReq.ProtoReflect.Descriptor instead.
func (*SetCoilReq) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{30}
}

func (x *SetCoilReq) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *SetCoilReq) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SetCoilReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SetCoilResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *BitGroupRegister `protobuf:"bytes,1,opt,name=info,proto3" json:"info"`
}

func (x *SetCoilResp) Reset() {
	*x = SetCoilResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCoilResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCoilResp) ProtoMessage() {}

func (x *SetCoilResp) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCoilResp.ProtoReflect.Descriptor instead.
func (*SetCoilResp) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{31}
}

func (x *SetCoilResp) GetInfo() *BitGroupRegister {
	if x != nil {
		return x.Info
	}
	return nil
}

type CoilCtrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr   string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr"`
	Random bool   `protobuf:"varint,2,opt,name=random,proto3" json:"random"`
}

func (x *CoilCtrlReq) Reset() {
	*x = CoilCtrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoilCtrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoilCtrlReq) ProtoMessage() {}

func (x *CoilCtrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoilCtrlReq.ProtoReflect.Descriptor instead.
func (*CoilCtrlReq) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{32}
}

func (x *CoilCtrlReq) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *CoilCtrlReq) GetRandom() bool {
	if x != nil {
		return x.Random
	}
	return false
}

type CoilCtrlResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *BitGroupRegister `protobuf:"bytes,1,opt,name=info,proto3" json:"info"`
}

func (x *CoilCtrlResp) Reset() {
	*x = CoilCtrlResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modbus_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoilCtrlResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoilCtrlResp) ProtoMessage() {}

func (x *CoilCtrlResp) ProtoReflect() protoreflect.Message {
	mi := &file_modbus_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoilCtrlResp.ProtoReflect.Descriptor instead.
func (*CoilCtrlResp) Descriptor() ([]byte, []int) {
	return file_modbus_proto_rawDescGZIP(), []int{33}
}

func (x *CoilCtrlResp) GetInfo() *BitGroupRegister {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_modbus_proto protoreflect.FileDescriptor

var file_modbus_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd8, 0x01, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x68, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x62,
	0x69, 0x6e, 0x74, 0x31, 0x36, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6c, 0x69, 0x6e, 0x74, 0x31, 0x36,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x6c, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x62, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x73, 0x62, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x69,
	0x6e, 0x74, 0x31, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6c, 0x69, 0x6e,
	0x74, 0x31, 0x36, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x22,
	0xf0, 0x01, 0x0a, 0x10, 0x42, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x68, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69,
	0x74, 0x37, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x69, 0x74, 0x37, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x69, 0x74, 0x36, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x69,
	0x74, 0x36, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x74, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x62, 0x69, 0x74, 0x35, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x74, 0x34, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x69, 0x74, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69,
	0x74, 0x33, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x69, 0x74, 0x33, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x69, 0x74, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x69,
	0x74, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x74, 0x31, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x62, 0x69, 0x74, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x74, 0x30, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x69, 0x74, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x22, 0x32, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x82, 0x01, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x84,
	0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x42,
	0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x7b, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x42, 0x69, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x0f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x54, 0x55, 0x41, 0x64, 0x64, 0x72,
	0x52, 0x65, 0x71, 0x22, 0x26, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x54, 0x55, 0x41, 0x64, 0x64,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x22, 0x0f, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x54, 0x43, 0x50, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x22, 0x26, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x54, 0x43, 0x50, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x64, 0x64, 0x72, 0x73, 0x22, 0x0f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x54, 0x59, 0x41, 0x64,
	0x64, 0x72, 0x52, 0x65, 0x71, 0x22, 0x9b, 0x01, 0x0a, 0x07, 0x54, 0x54, 0x59, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x75, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x61, 0x75, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x69, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x62, 0x69, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x62, 0x69, 0x74,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x22, 0x37, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x54, 0x59, 0x41, 0x64, 0x64,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x25, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x54, 0x54,
	0x59, 0x41, 0x64, 0x64, 0x72, 0x52, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x22, 0x55, 0x0a, 0x13,
	0x53, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x40, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x62,
	0x75, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x4a, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x61,
	0x78, 0x22, 0x3d, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x57, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x22, 0x42, 0x0a, 0x14, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x74, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x22, 0x41, 0x0a, 0x15, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x74, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f,
	0x64, 0x62, 0x75, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x57, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x48, 0x6f,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x42, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75,
	0x73, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d,
	0x61, 0x78, 0x22, 0x3f, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73,
	0x2e, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0x44, 0x0a, 0x16, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x74, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x22, 0x43, 0x0a, 0x17, 0x48, 0x6f, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x74, 0x72, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x55,
	0x0a, 0x13, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x44, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63,
	0x72, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f,
	0x64, 0x62, 0x75, 0x73, 0x2e, 0x42, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x42, 0x0a, 0x14, 0x44,
	0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x74, 0x72, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x22,
	0x45, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x74, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e,
	0x42, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x3b, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x42, 0x69, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x22, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x69, 0x6c, 0x43, 0x74, 0x72, 0x6c, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x22, 0x3c, 0x0a, 0x0c,
	0x43, 0x6f, 0x69, 0x6c, 0x43, 0x74, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64,
	0x62, 0x75, 0x73, 0x2e, 0x42, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x32, 0xbb, 0x0d, 0x0a, 0x07, 0x58,
	0x4d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x12, 0x5d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x0e, 0x2e, 0x6d, 0x6f,
	0x64, 0x62, 0x75, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x1a, 0x1c, 0x2e, 0x6d, 0x6f,
	0x64, 0x62, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x12, 0x12, 0x2f, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x0e, 0x2e, 0x6d,
	0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x1a, 0x1e, 0x2e, 0x6d,
	0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2f, 0x68, 0x6f,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x1a,
	0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63,
	0x72, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2f, 0x64,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x1a, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x19, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x69,
	0x6c, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x54, 0x55,
	0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x54, 0x55, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x6d,
	0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x54, 0x55, 0x41, 0x64, 0x64, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x6d,
	0x6f, 0x64, 0x62, 0x75, 0x73, 0x2f, 0x72, 0x74, 0x75, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x56,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x43, 0x50, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x15, 0x2e,
	0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x43, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x43, 0x50, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x18, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2f, 0x74, 0x63,
	0x70, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x54, 0x59,
	0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x54, 0x59, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x6d,
	0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x54, 0x59, 0x41, 0x64, 0x64, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x6d,
	0x6f, 0x64, 0x62, 0x75, 0x73, 0x2f, 0x74, 0x74, 0x79, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x70,
	0x0a, 0x10, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x21, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x3a, 0x01, 0x2a,
	0x12, 0x64, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x6d, 0x6f,
	0x64, 0x62, 0x75, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13,
	0x2f, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x11, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x74, 0x72, 0x6c, 0x12, 0x1c, 0x2e, 0x6d, 0x6f,
	0x64, 0x62, 0x75, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x74, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x62,
	0x75, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x74, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17,
	0x22, 0x12, 0x2f, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f,
	0x63, 0x74, 0x72, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x78, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x48, 0x6f,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x2e,
	0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x6d,
	0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x23, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2f, 0x68, 0x6f,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x3a, 0x01,
	0x2a, 0x12, 0x6c, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x20, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2f, 0x68,
	0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x01, 0x2a, 0x12,
	0x77, 0x0a, 0x13, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x74, 0x72, 0x6c, 0x12, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e,
	0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x74, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e,
	0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x74, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22,
	0x14, 0x2f, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x2f, 0x63, 0x74, 0x72, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x71, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x44,
	0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1b, 0x2e, 0x6d,
	0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x62,
	0x75, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22,
	0x17, 0x2f, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2f, 0x64, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x70, 0x0a, 0x11, 0x44,
	0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x74, 0x72, 0x6c,
	0x12, 0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65,
	0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x74, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1d,
	0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x74, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2f, 0x64,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x63, 0x74, 0x72, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x54, 0x0a,
	0x07, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6c, 0x12, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x6d,
	0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x6d, 0x6f, 0x64, 0x62,
	0x75, 0x73, 0x2f, 0x63, 0x6f, 0x69, 0x6c, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x3a, 0x01, 0x2a, 0x12, 0x53, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6c, 0x43, 0x74, 0x72, 0x6c, 0x12,
	0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6c, 0x43, 0x74, 0x72,
	0x6c, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x43, 0x6f,
	0x69, 0x6c, 0x43, 0x74, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x16, 0x22, 0x11, 0x2f, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x69, 0x6c,
	0x2f, 0x63, 0x74, 0x72, 0x6c, 0x3a, 0x01, 0x2a, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_modbus_proto_rawDescOnce sync.Once
	file_modbus_proto_rawDescData = file_modbus_proto_rawDesc
)

func file_modbus_proto_rawDescGZIP() []byte {
	file_modbus_proto_rawDescOnce.Do(func() {
		file_modbus_proto_rawDescData = protoimpl.X.CompressGZIP(file_modbus_proto_rawDescData)
	})
	return file_modbus_proto_rawDescData
}

var file_modbus_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_modbus_proto_goTypes = []interface{}{
	(*WordRegister)(nil),            // 0: modbus.WordRegister
	(*BitGroupRegister)(nil),        // 1: modbus.BitGroupRegister
	(*Paging)(nil),                  // 2: modbus.Paging
	(*GetInputRegisterResp)(nil),    // 3: modbus.GetInputRegisterResp
	(*GetHoldingRegisterResp)(nil),  // 4: modbus.GetHoldingRegisterResp
	(*GetDiscreteInputResp)(nil),    // 5: modbus.GetDiscreteInputResp
	(*GetCoilResp)(nil),             // 6: modbus.GetCoilResp
	(*GetRTUAddrReq)(nil),           // 7: modbus.GetRTUAddrReq
	(*GetRTUAddrResp)(nil),          // 8: modbus.GetRTUAddrResp
	(*GetTCPAddrReq)(nil),           // 9: modbus.GetTCPAddrReq
	(*GetTCPAddrResp)(nil),          // 10: modbus.GetTCPAddrResp
	(*GetTTYAddrReq)(nil),           // 11: modbus.GetTTYAddrReq
	(*TTYAddr)(nil),                 // 12: modbus.TTYAddr
	(*GetTTYAddrResp)(nil),          // 13: modbus.GetTTYAddrResp
	(*SetInputRegisterReq)(nil),     // 14: modbus.SetInputRegisterReq
	(*SetInputRegisterResp)(nil),    // 15: modbus.SetInputRegisterResp
	(*SetInputRangeReq)(nil),        // 16: modbus.SetInputRangeReq
	(*SetInputRangeResp)(nil),       // 17: modbus.SetInputRangeResp
	(*InputRegisterCtrlReq)(nil),    // 18: modbus.InputRegisterCtrlReq
	(*InputRegisterCtrlResp)(nil),   // 19: modbus.InputRegisterCtrlResp
	(*SetHoldingRegisterReq)(nil),   // 20: modbus.SetHoldingRegisterReq
	(*SetHoldingRegisterResp)(nil),  // 21: modbus.SetHoldingRegisterResp
	(*SetHoldingRangeReq)(nil),      // 22: modbus.SetHoldingRangeReq
	(*SetHoldingRangeResp)(nil),     // 23: modbus.SetHoldingRangeResp
	(*HoldingRegisterCtrlReq)(nil),  // 24: modbus.HoldingRegisterCtrlReq
	(*HoldingRegisterCtrlResp)(nil), // 25: modbus.HoldingRegisterCtrlResp
	(*SetDiscreteInputReq)(nil),     // 26: modbus.SetDiscreteInputReq
	(*SetDiscreteInputResp)(nil),    // 27: modbus.SetDiscreteInputResp
	(*DiscreteInputCtrlReq)(nil),    // 28: modbus.DiscreteInputCtrlReq
	(*DiscreteInputCtrlResp)(nil),   // 29: modbus.DiscreteInputCtrlResp
	(*SetCoilReq)(nil),              // 30: modbus.SetCoilReq
	(*SetCoilResp)(nil),             // 31: modbus.SetCoilResp
	(*CoilCtrlReq)(nil),             // 32: modbus.CoilCtrlReq
	(*CoilCtrlResp)(nil),            // 33: modbus.CoilCtrlResp
}
var file_modbus_proto_depIdxs = []int32{
	0,  // 0: modbus.GetInputRegisterResp.list:type_name -> modbus.WordRegister
	0,  // 1: modbus.GetHoldingRegisterResp.list:type_name -> modbus.WordRegister
	1,  // 2: modbus.GetDiscreteInputResp.list:type_name -> modbus.BitGroupRegister
	1,  // 3: modbus.GetCoilResp.list:type_name -> modbus.BitGroupRegister
	12, // 4: modbus.GetTTYAddrResp.addrs:type_name -> modbus.TTYAddr
	0,  // 5: modbus.SetInputRegisterResp.info:type_name -> modbus.WordRegister
	0,  // 6: modbus.SetInputRangeResp.info:type_name -> modbus.WordRegister
	0,  // 7: modbus.InputRegisterCtrlResp.info:type_name -> modbus.WordRegister
	0,  // 8: modbus.SetHoldingRegisterResp.info:type_name -> modbus.WordRegister
	0,  // 9: modbus.SetHoldingRangeResp.info:type_name -> modbus.WordRegister
	0,  // 10: modbus.HoldingRegisterCtrlResp.info:type_name -> modbus.WordRegister
	1,  // 11: modbus.SetDiscreteInputResp.info:type_name -> modbus.BitGroupRegister
	1,  // 12: modbus.DiscreteInputCtrlResp.info:type_name -> modbus.BitGroupRegister
	1,  // 13: modbus.SetCoilResp.info:type_name -> modbus.BitGroupRegister
	1,  // 14: modbus.CoilCtrlResp.info:type_name -> modbus.BitGroupRegister
	2,  // 15: modbus.XModbus.GetInputRegisters:input_type -> modbus.Paging
	2,  // 16: modbus.XModbus.GetHoldingRegisters:input_type -> modbus.Paging
	2,  // 17: modbus.XModbus.GetDiscreteInputs:input_type -> modbus.Paging
	2,  // 18: modbus.XModbus.GetCoils:input_type -> modbus.Paging
	7,  // 19: modbus.XModbus.GetRTUAddrs:input_type -> modbus.GetRTUAddrReq
	9,  // 20: modbus.XModbus.GetTCPAddrs:input_type -> modbus.GetTCPAddrReq
	11, // 21: modbus.XModbus.GetTTYAddrs:input_type -> modbus.GetTTYAddrReq
	14, // 22: modbus.XModbus.SetInputRegister:input_type -> modbus.SetInputRegisterReq
	16, // 23: modbus.XModbus.SetInputRange:input_type -> modbus.SetInputRangeReq
	18, // 24: modbus.XModbus.InputRegisterCtrl:input_type -> modbus.InputRegisterCtrlReq
	20, // 25: modbus.XModbus.SetHoldingRegister:input_type -> modbus.SetHoldingRegisterReq
	22, // 26: modbus.XModbus.SetHoldingRange:input_type -> modbus.SetHoldingRangeReq
	24, // 27: modbus.XModbus.HoldingRegisterCtrl:input_type -> modbus.HoldingRegisterCtrlReq
	26, // 28: modbus.XModbus.SetDiscreteInput:input_type -> modbus.SetDiscreteInputReq
	28, // 29: modbus.XModbus.DiscreteInputCtrl:input_type -> modbus.DiscreteInputCtrlReq
	30, // 30: modbus.XModbus.SetCoil:input_type -> modbus.SetCoilReq
	32, // 31: modbus.XModbus.CoilCtrl:input_type -> modbus.CoilCtrlReq
	3,  // 32: modbus.XModbus.GetInputRegisters:output_type -> modbus.GetInputRegisterResp
	4,  // 33: modbus.XModbus.GetHoldingRegisters:output_type -> modbus.GetHoldingRegisterResp
	5,  // 34: modbus.XModbus.GetDiscreteInputs:output_type -> modbus.GetDiscreteInputResp
	6,  // 35: modbus.XModbus.GetCoils:output_type -> modbus.GetCoilResp
	8,  // 36: modbus.XModbus.GetRTUAddrs:output_type -> modbus.GetRTUAddrResp
	10, // 37: modbus.XModbus.GetTCPAddrs:output_type -> modbus.GetTCPAddrResp
	13, // 38: modbus.XModbus.GetTTYAddrs:output_type -> modbus.GetTTYAddrResp
	15, // 39: modbus.XModbus.SetInputRegister:output_type -> modbus.SetInputRegisterResp
	17, // 40: modbus.XModbus.SetInputRange:output_type -> modbus.SetInputRangeResp
	19, // 41: modbus.XModbus.InputRegisterCtrl:output_type -> modbus.InputRegisterCtrlResp
	21, // 42: modbus.XModbus.SetHoldingRegister:output_type -> modbus.SetHoldingRegisterResp
	23, // 43: modbus.XModbus.SetHoldingRange:output_type -> modbus.SetHoldingRangeResp
	25, // 44: modbus.XModbus.HoldingRegisterCtrl:output_type -> modbus.HoldingRegisterCtrlResp
	27, // 45: modbus.XModbus.SetDiscreteInput:output_type -> modbus.SetDiscreteInputResp
	29, // 46: modbus.XModbus.DiscreteInputCtrl:output_type -> modbus.DiscreteInputCtrlResp
	31, // 47: modbus.XModbus.SetCoil:output_type -> modbus.SetCoilResp
	33, // 48: modbus.XModbus.CoilCtrl:output_type -> modbus.CoilCtrlResp
	32, // [32:49] is the sub-list for method output_type
	15, // [15:32] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_modbus_proto_init() }
func file_modbus_proto_init() {
	if File_modbus_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_modbus_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WordRegister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitGroupRegister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInputRegisterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHoldingRegisterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiscreteInputResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoilResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRTUAddrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRTUAddrResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTCPAddrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTCPAddrResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTTYAddrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TTYAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTTYAddrResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetInputRegisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetInputRegisterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetInputRangeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetInputRangeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputRegisterCtrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputRegisterCtrlResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHoldingRegisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHoldingRegisterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHoldingRangeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHoldingRangeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoldingRegisterCtrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoldingRegisterCtrlResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDiscreteInputReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDiscreteInputResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscreteInputCtrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscreteInputCtrlResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCoilReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCoilResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoilCtrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modbus_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoilCtrlResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_modbus_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_modbus_proto_goTypes,
		DependencyIndexes: file_modbus_proto_depIdxs,
		MessageInfos:      file_modbus_proto_msgTypes,
	}.Build()
	File_modbus_proto = out.File
	file_modbus_proto_rawDesc = nil
	file_modbus_proto_goTypes = nil
	file_modbus_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// XModbusClient is the client API for XModbus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type XModbusClient interface {
	// 获取04功能码寄存器信息
	GetInputRegisters(ctx context.Context, in *Paging, opts ...grpc.CallOption) (*GetInputRegisterResp, error)
	// 获取03功能码寄存器信息
	GetHoldingRegisters(ctx context.Context, in *Paging, opts ...grpc.CallOption) (*GetHoldingRegisterResp, error)
	// 获取02功能码寄存器信息
	GetDiscreteInputs(ctx context.Context, in *Paging, opts ...grpc.CallOption) (*GetDiscreteInputResp, error)
	// 获取01功能码寄存器信息
	GetCoils(ctx context.Context, in *Paging, opts ...grpc.CallOption) (*GetCoilResp, error)
	// 获取 modbus RTU 协议地址列表
	GetRTUAddrs(ctx context.Context, in *GetRTUAddrReq, opts ...grpc.CallOption) (*GetRTUAddrResp, error)
	// 获取 modbus TCP 协议地址列表
	GetTCPAddrs(ctx context.Context, in *GetTCPAddrReq, opts ...grpc.CallOption) (*GetTCPAddrResp, error)
	// 获取 modbus RTU 串口地址列表
	GetTTYAddrs(ctx context.Context, in *GetTTYAddrReq, opts ...grpc.CallOption) (*GetTTYAddrResp, error)
	// 设置04功能码寄存器信息
	SetInputRegister(ctx context.Context, in *SetInputRegisterReq, opts ...grpc.CallOption) (*SetInputRegisterResp, error)
	// 设置04功能码寄存器范围
	SetInputRange(ctx context.Context, in *SetInputRangeReq, opts ...grpc.CallOption) (*SetInputRangeResp, error)
	// 设置04功能码寄存器随机
	InputRegisterCtrl(ctx context.Context, in *InputRegisterCtrlReq, opts ...grpc.CallOption) (*InputRegisterCtrlResp, error)
	// 设置03功能码寄存器信息
	SetHoldingRegister(ctx context.Context, in *SetHoldingRegisterReq, opts ...grpc.CallOption) (*SetHoldingRegisterResp, error)
	// 设置03功能码寄存器范围
	SetHoldingRange(ctx context.Context, in *SetHoldingRangeReq, opts ...grpc.CallOption) (*SetHoldingRangeResp, error)
	// 设置03功能码寄存器随机
	HoldingRegisterCtrl(ctx context.Context, in *HoldingRegisterCtrlReq, opts ...grpc.CallOption) (*HoldingRegisterCtrlResp, error)
	// 设置02功能码寄存器信息
	SetDiscreteInput(ctx context.Context, in *SetDiscreteInputReq, opts ...grpc.CallOption) (*SetDiscreteInputResp, error)
	// 设置02功能码寄存器信息
	DiscreteInputCtrl(ctx context.Context, in *DiscreteInputCtrlReq, opts ...grpc.CallOption) (*DiscreteInputCtrlResp, error)
	// 设置02功能码寄存器信息
	SetCoil(ctx context.Context, in *SetCoilReq, opts ...grpc.CallOption) (*SetCoilResp, error)
	// 设置02功能码寄存器信息
	CoilCtrl(ctx context.Context, in *CoilCtrlReq, opts ...grpc.CallOption) (*CoilCtrlResp, error)
}

type xModbusClient struct {
	cc grpc.ClientConnInterface
}

func NewXModbusClient(cc grpc.ClientConnInterface) XModbusClient {
	return &xModbusClient{cc}
}

func (c *xModbusClient) GetInputRegisters(ctx context.Context, in *Paging, opts ...grpc.CallOption) (*GetInputRegisterResp, error) {
	out := new(GetInputRegisterResp)
	err := c.cc.Invoke(ctx, "/modbus.XModbus/GetInputRegisters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xModbusClient) GetHoldingRegisters(ctx context.Context, in *Paging, opts ...grpc.CallOption) (*GetHoldingRegisterResp, error) {
	out := new(GetHoldingRegisterResp)
	err := c.cc.Invoke(ctx, "/modbus.XModbus/GetHoldingRegisters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xModbusClient) GetDiscreteInputs(ctx context.Context, in *Paging, opts ...grpc.CallOption) (*GetDiscreteInputResp, error) {
	out := new(GetDiscreteInputResp)
	err := c.cc.Invoke(ctx, "/modbus.XModbus/GetDiscreteInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xModbusClient) GetCoils(ctx context.Context, in *Paging, opts ...grpc.CallOption) (*GetCoilResp, error) {
	out := new(GetCoilResp)
	err := c.cc.Invoke(ctx, "/modbus.XModbus/GetCoils", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xModbusClient) GetRTUAddrs(ctx context.Context, in *GetRTUAddrReq, opts ...grpc.CallOption) (*GetRTUAddrResp, error) {
	out := new(GetRTUAddrResp)
	err := c.cc.Invoke(ctx, "/modbus.XModbus/GetRTUAddrs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xModbusClient) GetTCPAddrs(ctx context.Context, in *GetTCPAddrReq, opts ...grpc.CallOption) (*GetTCPAddrResp, error) {
	out := new(GetTCPAddrResp)
	err := c.cc.Invoke(ctx, "/modbus.XModbus/GetTCPAddrs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xModbusClient) GetTTYAddrs(ctx context.Context, in *GetTTYAddrReq, opts ...grpc.CallOption) (*GetTTYAddrResp, error) {
	out := new(GetTTYAddrResp)
	err := c.cc.Invoke(ctx, "/modbus.XModbus/GetTTYAddrs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xModbusClient) SetInputRegister(ctx context.Context, in *SetInputRegisterReq, opts ...grpc.CallOption) (*SetInputRegisterResp, error) {
	out := new(SetInputRegisterResp)
	err := c.cc.Invoke(ctx, "/modbus.XModbus/SetInputRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xModbusClient) SetInputRange(ctx context.Context, in *SetInputRangeReq, opts ...grpc.CallOption) (*SetInputRangeResp, error) {
	out := new(SetInputRangeResp)
	err := c.cc.Invoke(ctx, "/modbus.XModbus/SetInputRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xModbusClient) InputRegisterCtrl(ctx context.Context, in *InputRegisterCtrlReq, opts ...grpc.CallOption) (*InputRegisterCtrlResp, error) {
	out := new(InputRegisterCtrlResp)
	err := c.cc.Invoke(ctx, "/modbus.XModbus/InputRegisterCtrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xModbusClient) SetHoldingRegister(ctx context.Context, in *SetHoldingRegisterReq, opts ...grpc.CallOption) (*SetHoldingRegisterResp, error) {
	out := new(SetHoldingRegisterResp)
	err := c.cc.Invoke(ctx, "/modbus.XModbus/SetHoldingRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xModbusClient) SetHoldingRange(ctx context.Context, in *SetHoldingRangeReq, opts ...grpc.CallOption) (*SetHoldingRangeResp, error) {
	out := new(SetHoldingRangeResp)
	err := c.cc.Invoke(ctx, "/modbus.XModbus/SetHoldingRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xModbusClient) HoldingRegisterCtrl(ctx context.Context, in *HoldingRegisterCtrlReq, opts ...grpc.CallOption) (*HoldingRegisterCtrlResp, error) {
	out := new(HoldingRegisterCtrlResp)
	err := c.cc.Invoke(ctx, "/modbus.XModbus/HoldingRegisterCtrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xModbusClient) SetDiscreteInput(ctx context.Context, in *SetDiscreteInputReq, opts ...grpc.CallOption) (*SetDiscreteInputResp, error) {
	out := new(SetDiscreteInputResp)
	err := c.cc.Invoke(ctx, "/modbus.XModbus/SetDiscreteInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xModbusClient) DiscreteInputCtrl(ctx context.Context, in *DiscreteInputCtrlReq, opts ...grpc.CallOption) (*DiscreteInputCtrlResp, error) {
	out := new(DiscreteInputCtrlResp)
	err := c.cc.Invoke(ctx, "/modbus.XModbus/DiscreteInputCtrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xModbusClient) SetCoil(ctx context.Context, in *SetCoilReq, opts ...grpc.CallOption) (*SetCoilResp, error) {
	out := new(SetCoilResp)
	err := c.cc.Invoke(ctx, "/modbus.XModbus/SetCoil", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xModbusClient) CoilCtrl(ctx context.Context, in *CoilCtrlReq, opts ...grpc.CallOption) (*CoilCtrlResp, error) {
	out := new(CoilCtrlResp)
	err := c.cc.Invoke(ctx, "/modbus.XModbus/CoilCtrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XModbusServer is the server API for XModbus service.
type XModbusServer interface {
	// 获取04功能码寄存器信息
	GetInputRegisters(context.Context, *Paging) (*GetInputRegisterResp, error)
	// 获取03功能码寄存器信息
	GetHoldingRegisters(context.Context, *Paging) (*GetHoldingRegisterResp, error)
	// 获取02功能码寄存器信息
	GetDiscreteInputs(context.Context, *Paging) (*GetDiscreteInputResp, error)
	// 获取01功能码寄存器信息
	GetCoils(context.Context, *Paging) (*GetCoilResp, error)
	// 获取 modbus RTU 协议地址列表
	GetRTUAddrs(context.Context, *GetRTUAddrReq) (*GetRTUAddrResp, error)
	// 获取 modbus TCP 协议地址列表
	GetTCPAddrs(context.Context, *GetTCPAddrReq) (*GetTCPAddrResp, error)
	// 获取 modbus RTU 串口地址列表
	GetTTYAddrs(context.Context, *GetTTYAddrReq) (*GetTTYAddrResp, error)
	// 设置04功能码寄存器信息
	SetInputRegister(context.Context, *SetInputRegisterReq) (*SetInputRegisterResp, error)
	// 设置04功能码寄存器范围
	SetInputRange(context.Context, *SetInputRangeReq) (*SetInputRangeResp, error)
	// 设置04功能码寄存器随机
	InputRegisterCtrl(context.Context, *InputRegisterCtrlReq) (*InputRegisterCtrlResp, error)
	// 设置03功能码寄存器信息
	SetHoldingRegister(context.Context, *SetHoldingRegisterReq) (*SetHoldingRegisterResp, error)
	// 设置03功能码寄存器范围
	SetHoldingRange(context.Context, *SetHoldingRangeReq) (*SetHoldingRangeResp, error)
	// 设置03功能码寄存器随机
	HoldingRegisterCtrl(context.Context, *HoldingRegisterCtrlReq) (*HoldingRegisterCtrlResp, error)
	// 设置02功能码寄存器信息
	SetDiscreteInput(context.Context, *SetDiscreteInputReq) (*SetDiscreteInputResp, error)
	// 设置02功能码寄存器信息
	DiscreteInputCtrl(context.Context, *DiscreteInputCtrlReq) (*DiscreteInputCtrlResp, error)
	// 设置02功能码寄存器信息
	SetCoil(context.Context, *SetCoilReq) (*SetCoilResp, error)
	// 设置02功能码寄存器信息
	CoilCtrl(context.Context, *CoilCtrlReq) (*CoilCtrlResp, error)
}

// UnimplementedXModbusServer can be embedded to have forward compatible implementations.
type UnimplementedXModbusServer struct {
}

func (*UnimplementedXModbusServer) GetInputRegisters(context.Context, *Paging) (*GetInputRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInputRegisters not implemented")
}
func (*UnimplementedXModbusServer) GetHoldingRegisters(context.Context, *Paging) (*GetHoldingRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHoldingRegisters not implemented")
}
func (*UnimplementedXModbusServer) GetDiscreteInputs(context.Context, *Paging) (*GetDiscreteInputResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscreteInputs not implemented")
}
func (*UnimplementedXModbusServer) GetCoils(context.Context, *Paging) (*GetCoilResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoils not implemented")
}
func (*UnimplementedXModbusServer) GetRTUAddrs(context.Context, *GetRTUAddrReq) (*GetRTUAddrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRTUAddrs not implemented")
}
func (*UnimplementedXModbusServer) GetTCPAddrs(context.Context, *GetTCPAddrReq) (*GetTCPAddrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTCPAddrs not implemented")
}
func (*UnimplementedXModbusServer) GetTTYAddrs(context.Context, *GetTTYAddrReq) (*GetTTYAddrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTTYAddrs not implemented")
}
func (*UnimplementedXModbusServer) SetInputRegister(context.Context, *SetInputRegisterReq) (*SetInputRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInputRegister not implemented")
}
func (*UnimplementedXModbusServer) SetInputRange(context.Context, *SetInputRangeReq) (*SetInputRangeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInputRange not implemented")
}
func (*UnimplementedXModbusServer) InputRegisterCtrl(context.Context, *InputRegisterCtrlReq) (*InputRegisterCtrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InputRegisterCtrl not implemented")
}
func (*UnimplementedXModbusServer) SetHoldingRegister(context.Context, *SetHoldingRegisterReq) (*SetHoldingRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHoldingRegister not implemented")
}
func (*UnimplementedXModbusServer) SetHoldingRange(context.Context, *SetHoldingRangeReq) (*SetHoldingRangeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHoldingRange not implemented")
}
func (*UnimplementedXModbusServer) HoldingRegisterCtrl(context.Context, *HoldingRegisterCtrlReq) (*HoldingRegisterCtrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HoldingRegisterCtrl not implemented")
}
func (*UnimplementedXModbusServer) SetDiscreteInput(context.Context, *SetDiscreteInputReq) (*SetDiscreteInputResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDiscreteInput not implemented")
}
func (*UnimplementedXModbusServer) DiscreteInputCtrl(context.Context, *DiscreteInputCtrlReq) (*DiscreteInputCtrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscreteInputCtrl not implemented")
}
func (*UnimplementedXModbusServer) SetCoil(context.Context, *SetCoilReq) (*SetCoilResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCoil not implemented")
}
func (*UnimplementedXModbusServer) CoilCtrl(context.Context, *CoilCtrlReq) (*CoilCtrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoilCtrl not implemented")
}

func RegisterXModbusServer(s *grpc.Server, srv XModbusServer) {
	s.RegisterService(&_XModbus_serviceDesc, srv)
}

func _XModbus_GetInputRegisters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paging)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XModbusServer).GetInputRegisters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus.XModbus/GetInputRegisters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XModbusServer).GetInputRegisters(ctx, req.(*Paging))
	}
	return interceptor(ctx, in, info, handler)
}

func _XModbus_GetHoldingRegisters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paging)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XModbusServer).GetHoldingRegisters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus.XModbus/GetHoldingRegisters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XModbusServer).GetHoldingRegisters(ctx, req.(*Paging))
	}
	return interceptor(ctx, in, info, handler)
}

func _XModbus_GetDiscreteInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paging)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XModbusServer).GetDiscreteInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus.XModbus/GetDiscreteInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XModbusServer).GetDiscreteInputs(ctx, req.(*Paging))
	}
	return interceptor(ctx, in, info, handler)
}

func _XModbus_GetCoils_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paging)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XModbusServer).GetCoils(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus.XModbus/GetCoils",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XModbusServer).GetCoils(ctx, req.(*Paging))
	}
	return interceptor(ctx, in, info, handler)
}

func _XModbus_GetRTUAddrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRTUAddrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XModbusServer).GetRTUAddrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus.XModbus/GetRTUAddrs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XModbusServer).GetRTUAddrs(ctx, req.(*GetRTUAddrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XModbus_GetTCPAddrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTCPAddrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XModbusServer).GetTCPAddrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus.XModbus/GetTCPAddrs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XModbusServer).GetTCPAddrs(ctx, req.(*GetTCPAddrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XModbus_GetTTYAddrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTTYAddrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XModbusServer).GetTTYAddrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus.XModbus/GetTTYAddrs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XModbusServer).GetTTYAddrs(ctx, req.(*GetTTYAddrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XModbus_SetInputRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInputRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XModbusServer).SetInputRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus.XModbus/SetInputRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XModbusServer).SetInputRegister(ctx, req.(*SetInputRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XModbus_SetInputRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInputRangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XModbusServer).SetInputRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus.XModbus/SetInputRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XModbusServer).SetInputRange(ctx, req.(*SetInputRangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XModbus_InputRegisterCtrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputRegisterCtrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XModbusServer).InputRegisterCtrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus.XModbus/InputRegisterCtrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XModbusServer).InputRegisterCtrl(ctx, req.(*InputRegisterCtrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XModbus_SetHoldingRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHoldingRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XModbusServer).SetHoldingRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus.XModbus/SetHoldingRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XModbusServer).SetHoldingRegister(ctx, req.(*SetHoldingRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XModbus_SetHoldingRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHoldingRangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XModbusServer).SetHoldingRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus.XModbus/SetHoldingRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XModbusServer).SetHoldingRange(ctx, req.(*SetHoldingRangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XModbus_HoldingRegisterCtrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HoldingRegisterCtrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XModbusServer).HoldingRegisterCtrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus.XModbus/HoldingRegisterCtrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XModbusServer).HoldingRegisterCtrl(ctx, req.(*HoldingRegisterCtrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XModbus_SetDiscreteInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDiscreteInputReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XModbusServer).SetDiscreteInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus.XModbus/SetDiscreteInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XModbusServer).SetDiscreteInput(ctx, req.(*SetDiscreteInputReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XModbus_DiscreteInputCtrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscreteInputCtrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XModbusServer).DiscreteInputCtrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus.XModbus/DiscreteInputCtrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XModbusServer).DiscreteInputCtrl(ctx, req.(*DiscreteInputCtrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XModbus_SetCoil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCoilReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XModbusServer).SetCoil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus.XModbus/SetCoil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XModbusServer).SetCoil(ctx, req.(*SetCoilReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XModbus_CoilCtrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoilCtrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XModbusServer).CoilCtrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus.XModbus/CoilCtrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XModbusServer).CoilCtrl(ctx, req.(*CoilCtrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _XModbus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "modbus.XModbus",
	HandlerType: (*XModbusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInputRegisters",
			Handler:    _XModbus_GetInputRegisters_Handler,
		},
		{
			MethodName: "GetHoldingRegisters",
			Handler:    _XModbus_GetHoldingRegisters_Handler,
		},
		{
			MethodName: "GetDiscreteInputs",
			Handler:    _XModbus_GetDiscreteInputs_Handler,
		},
		{
			MethodName: "GetCoils",
			Handler:    _XModbus_GetCoils_Handler,
		},
		{
			MethodName: "GetRTUAddrs",
			Handler:    _XModbus_GetRTUAddrs_Handler,
		},
		{
			MethodName: "GetTCPAddrs",
			Handler:    _XModbus_GetTCPAddrs_Handler,
		},
		{
			MethodName: "GetTTYAddrs",
			Handler:    _XModbus_GetTTYAddrs_Handler,
		},
		{
			MethodName: "SetInputRegister",
			Handler:    _XModbus_SetInputRegister_Handler,
		},
		{
			MethodName: "SetInputRange",
			Handler:    _XModbus_SetInputRange_Handler,
		},
		{
			MethodName: "InputRegisterCtrl",
			Handler:    _XModbus_InputRegisterCtrl_Handler,
		},
		{
			MethodName: "SetHoldingRegister",
			Handler:    _XModbus_SetHoldingRegister_Handler,
		},
		{
			MethodName: "SetHoldingRange",
			Handler:    _XModbus_SetHoldingRange_Handler,
		},
		{
			MethodName: "HoldingRegisterCtrl",
			Handler:    _XModbus_HoldingRegisterCtrl_Handler,
		},
		{
			MethodName: "SetDiscreteInput",
			Handler:    _XModbus_SetDiscreteInput_Handler,
		},
		{
			MethodName: "DiscreteInputCtrl",
			Handler:    _XModbus_DiscreteInputCtrl_Handler,
		},
		{
			MethodName: "SetCoil",
			Handler:    _XModbus_SetCoil_Handler,
		},
		{
			MethodName: "CoilCtrl",
			Handler:    _XModbus_CoilCtrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modbus.proto",
}
