# !/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import time

import json
import requests

import random
from redis import StrictRedis

reload(sys)
sys.setdefaultencoding('utf-8')

#####################################################################################################################
# mq publisher begin
import pika

class Publisher(object):

    def __init__(self, host = 'localhost', port = 5672, username = 'gj', password = 'xbrother', heartbeat_interval = 0, connection_attempts = 9999, retry_delay = 1, socket_timeout = 3, exchange = 'exchange', exchange_type = 'topic', exchange_durable = True, exchange_auto_delete = False, queue = 'queue', queue_durable = True, queue_auto_delete = False, queue_ttl = 0, routing_key = '#', no_ack = True):
        self.host = host
        self.port = port
        self.username = username
        self.password = password
        self.heartbeat_interval = heartbeat_interval
        self.connection_attempts = connection_attempts
        self.retry_delay = retry_delay
        self.socket_timeout = socket_timeout
        self.exchange = exchange
        self.exchange_type = exchange_type
        self.exchange_durable = exchange_durable
        self.exchange_auto_delete = exchange_auto_delete
        self.queue = queue
        self.queue_durable = queue_durable
        self.queue_auto_delete = queue_auto_delete
        self.queue_ttl = queue_ttl
        self.routing_key = routing_key
        self.no_ack = no_ack
        self._connection = None
        self._channel = None
        self._properties = pika.BasicProperties(content_type='application/json', delivery_mode=2, content_encoding='utf-8', priority=0, headers='')

    def open_connection(self):
        if self._connection:
            if self._connection.is_closing:
                self._connection = None
            if self._connection.is_open:
                return self._connection
        parameters = pika.ConnectionParameters(host=self.host, port=self.port, credentials=pika.PlainCredentials(self.username, self.password), heartbeat_interval=self.heartbeat_interval, connection_attempts=self.connection_attempts, retry_delay=self.retry_delay, socket_timeout=self.socket_timeout)
        self._connection = pika.BlockingConnection(parameters)
        return self._connection

    def open_channel(self):
        if self._channel:
            if self._channel.is_closing:
                self._channel = None
            if self._channel.is_open:
                return self._channel
        self._channel = self._connection.channel()
        self._setup_queue()

    def close_channel(self):
        try:
            if self._channel:
                self._channel.close()
                self._channel = None
        except Exception as ee:
            self._channel = None

    def close_connection(self):
        try:
            if self._connection:
                self._connection.close()
                self._connection = None
        except Exception as ee:
            self._connection = None

    def close(self):
        self.close_channel()
        self.close_connection()

    def _setup_queue(self):
        if self.queue:
            arguments = {}
            if self.queue_ttl > 0:
                arguments['x-message-ttl'] = self.queue_ttl * 1000
            self._channel.queue_declare(queue=self.queue, durable=self.queue_durable, auto_delete=self.queue_auto_delete, arguments=arguments)

    def publisher_data(self, data):
        if not self._connection or not self._connection.is_open:
            self.open_connection()
        if not self._channel or not self._channel.is_open:
            self.open_channel()
        try:
            #print self.host
            #print self.port
            #print self.exchange
            #print self.routing_key
            #return self._channel.basic_publish(exchange=self.exchange, routing_key=self.routing_key, body=json.dumps(data), properties=self._properties)
            return self._channel.basic_publish(exchange=self.exchange, routing_key=self.routing_key, body=json.dumps(data))
        except Exception as ee:
            print ee
            self.close()
            self.open_connection()
            self.open_channel()
            return False

    def publisher_data_ext(self, data, exchange, routing_key):
        if not self._connection or not self._connection.is_open:
            self.open_connection()
        if not self._channel or not self._channel.is_open:
            self.open_channel()
        try:
            return self._channel.basic_publish(exchange=exchange, routing_key=routing_key, body=json.dumps(data), properties=self._properties)
        except Exception as ee:
            self.close()
            self.open_connection()
            self.open_channel()
            return False

# mq publisher end
#####################################################################################################################

#####################################################################################################################
# redis-cli start

class Rtdb(object):
    def __init__(self, host='localhost', port=6379):
        self.cli = StrictRedis(host, port)

    def get(self, rid):
        v = self.cli.get("SPOTS:" + rid)
        return json.loads(v)

# redis-cli end
#####################################################################################################################




class Simulator(object):
    """
    TCP传输方法
    """
    def __init__(self):
        self.publisher = Publisher(
            exchange="fss_inner_exchange",
            routing_key="fss.inner.value.#"
        )

        self.rtdb = Rtdb()

        self._rules = [
            ('0_40503_1_10243_0','rand','0',''),
            ('0_40503_1_10244_0','rand','0',''),
            ('0_40503_1_10245_0','rand','1',''),
            ('0_40503_1_10246_0','rand','6',''),
            ('0_40503_1_10247_0','rand','12',''),
            ('0_40503_1_10248_0','rand','19',''),
            ('0_40503_1_10249_0','rand','2',''),
            ('0_40503_2_10250_0','rand','0',''),
            ('0_40503_2_10251_0','rand','0',''),
            ('0_40503_2_10252_0','rand','0',''),
            ('0_40503_2_10253_0','rand','0',''),
            ('0_40503_1_10254_0','rand','56000',''),
            ('0_40503_1_10255_0','rand','420000',''),
            ('0_40503_1_10256_0','rand','6500',''),
            ('0_40503_1_10257_0','rand','33600','100'),
            ('0_40503_1_10258_0','rand','268800','100'),
            ('0_40503_1_10259_0','rand','5655','100'),
            ('0_40503_1_10260_0','rand','60','5'),
            ('0_40503_1_10264_0','rand','64','5'),
            ('0_40503_1_10261_0','rand','87','3'),
            ('0_40503_1_10262_0','rand','53',''),
            ('0_40503_1_10263_0','rand','13',''),
            ('0_40503_1_10265_0','rand','45',''),
            ('0_40503_1_10266_0','rand','89',''),
            ('0_40503_1_10267_0','rand','26.5',''),
            ('0_40503_1_10268_0','rand','6.5',''),
            ('0_40503_1_10269_0','rand','22.5',''),
            ('0_40503_1_10270_0','rand','44.5',''),
            ('0_40503_1_10271_0','sum','332800','1.4'),
            ('0_40503_1_10272_0','sum','256000','1'),
            ('0_40503_1_10273_0','rand','33280','100'),
            ('0_40503_1_10274_0','rand','25600','100'),
            ('0_40503_1_10275_0','rand','20','5'),
            ('0_40503_1_10276_0','rand','6.5','0.5'),
            ('0_40503_1_10277_0','rand','80','10'),
            ('0_40503_1_10278_0','rand','80','5'),
            ('0_40503_1_10279_0','rand','',''),

            ('0_40504_1_10280_0','rand','88','5'),
            ('0_40504_1_10281_0','rand','93','5'),
            ('0_40504_1_10282_0','rand','98','2'),
            ('0_40504_1_10283_0','rand','88','5'),
            ('0_40504_2_10284_0','rand','0',''),
            ('0_40504_1_10285_0','rand','1448.88','100'),
            ('0_40504_1_10286_0','rand','1348.88','100'),
            ('0_40504_1_10287_0','rand','1540','100'),
            ('0_40504_1_10288_0','rand','1600','100'),
            ('0_40504_1_10289_0','rand','90','10'),
            ('0_40504_1_10290_0','rand','90','10'),
            ('0_40504_1_10291_0','rand','120',''),
            ('0_40504_1_10292_0','rand','15',''),
            ('0_40504_1_10293_0','rand','40','5'),
            ('0_40504_1_10294_0','rand','45','5'),
            ('0_40504_1_10295_0','rand','60','5'),
            ('0_40504_1_10296_0','rand','70','5'),
            ('0_40504_1_10297_0','rand','40','5'),
            ('0_40504_1_10298_0','rand','45','5'),
            ('0_40504_1_10299_0','rand','60','5'),
            ('0_40504_1_10300_0','rand','70','5'),
            ('0_40504_1_10301_0','rand','352',''),
            ('0_40504_1_10302_0','rand','400',''),
            ('0_40504_1_10303_0','rand','275',''),
            ('0_40504_1_10304_0','rand','215',''),
            ('0_40504_1_10305_0','rand','78.1',''),
            ('0_40504_1_10306_0','rand','78.1',''),
            ('0_40504_1_10307_0','rand','1237',''),
            ('0_40504_1_10308_0','rand','1540',''),
            ('0_40504_1_10309_0','rand','1041.1',''),
            ('0_40504_1_10310_0','rand','1600',''),
            ('0_40504_1_10311_0','rand','90','10'),
            ('0_40504_1_10312_0','rand','90','10'),
            ('0_40504_1_10313_0','rand','20',''),
            ('0_40504_1_10314_0','rand','20',''),
            ('0_40504_1_10315_0','rand','500','10'),

            ('0_40505_1_10319_0','rand','231800','100'),
            ('0_40505_1_10320_0','rand','80','6'),
            ('0_40505_1_10321_0','rand','1800','7'),
            ('0_40505_1_10322_0','rand','28','8'),
            ('0_40505_1_10323_0','rand','8','9'),
            ('0_40505_1_10324_0','rand','2','10'),
            ('0_40505_1_10325_0','rand','20','11'),
            ('0_40505_1_10326_0','rand','6','12'),
            ('0_40505_1_10327_0','rand','22','13'),
            ('0_40505_1_10328_0','rand','52','14'),
            ('0_40505_1_10329_0','rand','29.7','15'),
            ('0_40505_1_10330_0','rand','70.2','16'),
            ('0_40505_1_10331_0','rand','92','17'),
            ('0_40505_1_10332_0','rand','52','18'),
            ('0_40505_1_10333_0','rand','51','19'),
            ('0_40505_1_10334_0','rand','22','5'),
            ('0_40505_1_10335_0','rand','33.4','5'),
            ('0_40505_1_10336_0','rand','18.91','5'),
            ('0_40505_1_10337_0','rand','18.5','5'),
            ('0_40505_1_10338_0','rand','8','5'),
            ('0_40505_1_10339_0','rand','1.300114548','0.2'),
            ('0_40505_1_10340_0','rand','11350','100'),
            ('0_40505_1_10341_0','rand','8730','100'),
            ('0_40505_1_10342_0','rand','45850','100'),
            ('0_40505_1_10343_0','rand','344140','100'),
            ('0_40505_1_10344_0','rand','19125','100'),
            ('0_40505_1_10345_0','rand','152745','100'),
            ('0_40505_1_10346_0','rand','14','2'),
            ('0_40505_1_10351_0','rand','8','2'),
            ('0_40505_1_10348_0','rand','2','2'),
            ('0_40505_1_10349_0','rand','1','2'),
            ('0_40505_1_10350_0','rand','33971','500'),

            # 鹏博士数据中心
            ('0_40521_1_10731_0','rand','13',''),
            ('0_40521_1_10732_0','rand','127.4',''),
            ('0_40521_1_10733_0','rand','7',''),
            ('0_40521_1_10734_0','rand','200000',''),
            ('0_40521_1_10735_0','rand','8',''),
            ('0_40521_1_10736_0','rand','5',''),
            ('0_40521_1_10737_0','rand','0',''),
            ('0_40521_1_10738_0','rand','61.50%',''),
            ('0_40521_1_10739_0','rand','38.50%',''),
            ('0_40521_1_10740_0','rand','0%',''),
            ('0_40521_1_10741_0','rand','6',''),
            ('0_40521_1_10742_0','rand','7',''),
            ('0_40521_1_10743_0','rand','0',''),
            ('0_40521_1_10744_0','rand','0',''),
            ('0_40521_1_10745_0','rand','20909',''),
            ('0_40521_1_10746_0','rand','25909',''),
            ('0_40521_1_10747_0','rand','5000',''),
            ('0_40521_1_10748_0','rand','1148160',''),
            ('0_40521_1_10749_0','rand','1196000',''),
            ('0_40521_1_10750_0','rand','47840',''),
            ('0_40521_1_10751_0','rand','78%',''),
            ('0_40521_1_10752_0','rand','67990','100'),
            ('0_40521_1_10753_0','rand','48564.2','100'),
            ('0_40521_1_10754_0','rand','261250',''),
            ('0_40521_1_10755_0','rand','22350',''),
            ('0_40521_1_10756_0','rand','30350',''),
            ('0_40521_1_10757_0','rand','39195',''),
            ('0_40521_1_10758_0','rand','73.98',''),
            ('0_40521_1_10759_0','rand','6.33',''),
            ('0_40521_1_10760_0','rand','8.59',''),
            ('0_40521_1_10761_0','rand','11.1',''),
            ('0_40521_1_10762_0','rand','4173',''),
            ('0_40521_1_10763_0','rand','1040',''),
            ('0_40521_1_10764_0','rand','130416',''),
            ('0_40521_1_10765_0','rand','28626',''),
            ('0_40521_1_10766_0','rand','260',''),
            ('0_40521_1_10767_0','rand','28626',''),
            ('0_40521_1_10768_0','rand','32',''),
            ('0_40521_1_10769_0','rand','28',''),
            ('0_40521_1_10770_0','rand','21',''),
            ('0_40521_1_10771_0','rand','19',''),
            ('0_40521_1_10772_0','rand','16',''),

            ('0_40522_1_10773_0','rand','1553',''),
            ('0_40522_1_10774_0','rand','2017年8月9日',''),
            ('0_40522_1_10775_0','rand','A',''),
            ('0_40522_1_10776_0','rand','一级',''),
            ('0_40522_1_10777_0','rand','59',''),
            ('0_40522_1_10778_0','rand','3',''),
            ('0_40522_1_10779_0','rand','12',''),
            ('0_40522_1_10780_0','rand','8',''),
            ('0_40522_1_10781_0','rand','5',''),
            ('0_40522_1_10782_0','rand','1993',''),
            ('0_40522_1_10783_0','rand','2202',''),
            ('0_40522_1_10784_0','rand','209',''),
            ('0_40522_1_10785_0','rand','55490',''),
            ('0_40522_1_10786_0','rand','92484',''),
            ('0_40522_1_10787_0','rand','36994',''),
            ('0_40522_1_10788_0','rand','72%',''),
            ('0_40522_1_10789_0','rand','6768.6','100'),
            ('0_40522_1_10790_0','rand','1.3','100'),
            ('0_40522_1_10791_0','rand','22020',''),
            ('0_40522_1_10792_0','rand','1950',''),
            ('0_40522_1_10793_0','rand','2331',''),
            ('0_40522_1_10794_0','rand','3015',''),
            ('0_40522_1_10795_0','rand','321',''),
            ('0_40522_1_10796_0','rand','80',''),
            ('0_40522_1_10797_0','rand','10032',''),
            ('0_40522_1_10798_0','rand','2202',''),
            ('0_40522_1_10799_0','rand','20',''),
            ('0_40522_1_10800_0','rand','2202',''),
            ('0_40522_2_10801_0','rand','0',''),
            ('0_40522_2_10802_0','rand','0',''),
            ('0_40522_2_10803_0','rand','0',''),
            ('0_40522_2_10804_0','rand','0',''),

            ('0_40523_1_10805_0','rand','1659',''),
            ('0_40523_1_10806_0','rand','2017年4月25日',''),
            ('0_40523_1_10807_0','rand','A',''),
            ('0_40523_1_10808_0','rand','一级',''),
            ('0_40523_1_10809_0','rand','61',''),
            ('0_40523_1_10810_0','rand','4',''),
            ('0_40523_1_10811_0','rand','10',''),
            ('0_40523_1_10812_0','rand','10',''),
            ('0_40523_1_10813_0','rand','6',''),
            ('0_40523_1_10814_0','rand','1835',''),
            ('0_40523_1_10815_0','rand','2036',''),
            ('0_40523_1_10816_0','rand','201',''),
            ('0_40523_1_10817_0','rand','54632',''),
            ('0_40523_1_10818_0','rand','2294544',''),
            ('0_40523_1_10819_0','rand','30880',''),
            ('0_40523_1_10820_0','rand','78%',''),
            ('0_40523_1_10821_0','rand','6568.6','100'),
            ('0_40523_1_10822_0','rand','1.3','100'),
            ('0_40523_1_10823_0','rand','20360',''),
            ('0_40523_1_10824_0','rand','1850',''),
            ('0_40523_1_10825_0','rand','2231',''),
            ('0_40523_1_10826_0','rand','2915',''),
            ('0_40523_1_10827_0','rand','312',''),
            ('0_40523_1_10828_0','rand','72',''),
            ('0_40523_1_10829_0','rand','10002',''),
            ('0_40523_1_10830_0','rand','20360',''),
            ('0_40523_1_10831_0','rand','18',''),
            ('0_40523_1_10832_0','rand','2036',''),
            ('0_40523_2_10833_0','rand','0',''),
            ('0_40523_2_10834_0','rand','0',''),
            ('0_40523_2_10835_0','rand','0',''),
            ('0_40523_2_10836_0','rand','0',''),

            ('0_40524_1_10837_0','rand','1918',''),
            ('0_40524_1_10838_0','rand','2016年8月9日',''),
            ('0_40524_1_10839_0','rand','A',''),
            ('0_40524_1_10840_0','rand','一级',''),
            ('0_40524_1_10841_0','rand','56',''),
            ('0_40524_1_10842_0','rand','4',''),
            ('0_40524_1_10843_0','rand','8',''),
            ('0_40524_1_10844_0','rand','8',''),
            ('0_40524_1_10845_0','rand','4',''),
            ('0_40524_1_10846_0','rand','1832',''),
            ('0_40524_1_10847_0','rand','2034',''),
            ('0_40524_1_10848_0','rand','202',''),
            ('0_40524_1_10849_0','rand','54432',''),
            ('0_40524_1_10850_0','rand','85428',''),
            ('0_40524_1_10851_0','rand','30996',''),
            ('0_40524_1_10852_0','rand','78%',''),
            ('0_40524_1_10853_0','rand','6568.6','100'),
            ('0_40524_1_10854_0','rand','1.3','100'),
            ('0_40524_1_10855_0','rand','20360',''),
            ('0_40524_1_10856_0','rand','1850',''),
            ('0_40524_1_10857_0','rand','2231',''),
            ('0_40524_1_10858_0','rand','2915',''),
            ('0_40524_1_10859_0','rand','312',''),
            ('0_40524_1_10860_0','rand','72',''),
            ('0_40524_1_10861_0','rand','10002',''),
            ('0_40524_1_10862_0','rand','20360',''),
            ('0_40524_1_10863_0','rand','18',''),
            ('0_40524_1_10864_0','rand','2036',''),
            ('0_40524_2_10865_0','rand','0',''),
            ('0_40524_2_10866_0','rand','0',''),
            ('0_40524_2_10867_0','rand','0',''),
            ('0_40524_2_10868_0','rand','0',''),

            ('0_40525_1_10869_0','rand','1949',''),
            ('0_40525_1_10870_0','rand','2016年7月9日',''),
            ('0_40525_1_10871_0','rand','A',''),
            ('0_40525_1_10872_0','rand','一级',''),
            ('0_40525_1_10873_0','rand','58',''),
            ('0_40525_1_10874_0','rand','3',''),
            ('0_40525_1_10875_0','rand','10',''),
            ('0_40525_1_10876_0','rand','10',''),
            ('0_40525_1_10877_0','rand','4',''),
            ('0_40525_1_10878_0','rand','1895',''),
            ('0_40525_1_10879_0','rand','2105',''),
            ('0_40525_1_10880_0','rand','210',''),
            ('0_40525_1_10881_0','rand','54432',''),
            ('0_40525_1_10882_0','rand','88410',''),
            ('0_40525_1_10883_0','rand','33978',''),
            ('0_40525_1_10884_0','rand','78%',''),
            ('0_40525_1_10885_0','rand','6368.6','100'),
            ('0_40525_1_10886_0','rand','1.4','100'),
            ('0_40525_1_10887_0','rand','21050',''),
            ('0_40525_1_10888_0','rand','1864',''),
            ('0_40525_1_10889_0','rand','2123',''),
            ('0_40525_1_10890_0','rand','2846',''),
            ('0_40525_1_10891_0','rand','296',''),
            ('0_40525_1_10892_0','rand','72',''),
            ('0_40525_1_10893_0','rand','10112',''),
            ('0_40525_1_10894_0','rand','21050',''),
            ('0_40525_1_10895_0','rand','18',''),
            ('0_40525_1_10896_0','rand','2105',''),
            ('0_40525_2_10897_0','rand','0',''),
            ('0_40525_2_10898_0','rand','0',''),
            ('0_40525_2_10899_0','rand','0',''),
            ('0_40525_2_10900_0','rand','0',''),

            ('0_40526_1_10901_0','rand','1216',''),
            ('0_40526_1_10902_0','rand','2018年7月12日',''),
            ('0_40526_1_10903_0','rand','A',''),
            ('0_40526_1_10904_0','rand','一级',''),
            ('0_40526_1_10905_0','rand','64',''),
            ('0_40526_1_10906_0','rand','3',''),
            ('0_40526_1_10907_0','rand','10',''),
            ('0_40526_1_10908_0','rand','10',''),
            ('0_40526_1_10909_0','rand','4',''),
            ('0_40526_1_10910_0','rand','2130',''),
            ('0_40526_1_10911_0','rand','2356',''),
            ('0_40526_1_10912_0','rand','226',''),
            ('0_40526_1_10913_0','rand','56354',''),
            ('0_40526_1_10914_0','rand','98952',''),
            ('0_40526_1_10915_0','rand','42598',''),
            ('0_40526_1_10916_0','rand','82%',''),
            ('0_40526_1_10917_0','rand','6958.6','100'),
            ('0_40526_1_10918_0','rand','1.3','100'),
            ('0_40526_1_10919_0','rand','23560',''),
            ('0_40526_1_10920_0','rand','1986',''),
            ('0_40526_1_10921_0','rand','2310',''),
            ('0_40526_1_10922_0','rand','3126',''),
            ('0_40526_1_10923_0','rand','296',''),
            ('0_40526_1_10924_0','rand','88',''),
            ('0_40526_1_10925_0','rand','10002',''),
            ('0_40526_1_10926_0','rand','23560',''),
            ('0_40526_1_10927_0','rand','22',''),
            ('0_40526_1_10928_0','rand','2356',''),
            ('0_40526_2_10929_0','rand','0',''),
            ('0_40526_2_10930_0','rand','0',''),
            ('0_40526_2_10931_0','rand','0',''),
            ('0_40526_2_10932_0','rand','0',''),

            ('0_40527_1_10933_0','rand','1308',''),
            ('0_40527_1_10934_0','rand','2018年4月11日',''),
            ('0_40527_1_10935_0','rand','B',''),
            ('0_40527_1_10936_0','rand','一级',''),
            ('0_40527_1_10937_0','rand','61',''),
            ('0_40527_1_10938_0','rand','3',''),
            ('0_40527_1_10939_0','rand','9',''),
            ('0_40527_1_10940_0','rand','7',''),
            ('0_40527_1_10941_0','rand','4',''),
            ('0_40527_1_10942_0','rand','2121',''),
            ('0_40527_1_10943_0','rand','2325',''),
            ('0_40527_1_10944_0','rand','204',''),
            ('0_40527_1_10945_0','rand','51354',''),
            ('0_40527_1_10946_0','rand','97650',''),
            ('0_40527_1_10947_0','rand','46296',''),
            ('0_40527_1_10948_0','rand','82%',''),
            ('0_40527_1_10949_0','rand','6557.4','100'),
            ('0_40527_1_10950_0','rand','1.4','100'),
            ('0_40527_1_10951_0','rand','23250',''),
            ('0_40527_1_10952_0','rand','1846',''),
            ('0_40527_1_10953_0','rand','2101',''),
            ('0_40527_1_10954_0','rand','3065',''),
            ('0_40527_1_10955_0','rand','296',''),
            ('0_40527_1_10956_0','rand','88',''),
            ('0_40527_1_10957_0','rand','10556',''),
            ('0_40527_1_10958_0','rand','23250',''),
            ('0_40527_1_10959_0','rand','22',''),
            ('0_40527_1_10960_0','rand','2325',''),
            ('0_40527_2_10961_0','rand','0',''),
            ('0_40527_2_10962_0','rand','0',''),
            ('0_40527_2_10963_0','rand','0',''),
            ('0_40527_2_10964_0','rand','0',''),

            ('0_40528_1_10965_0','rand','1152',''),
            ('0_40528_1_10966_0','rand','2018年9月14日',''),
            ('0_40528_1_10967_0','rand','B',''),
            ('0_40528_1_10968_0','rand','二级',''),
            ('0_40528_1_10969_0','rand','52',''),
            ('0_40528_1_10970_0','rand','3',''),
            ('0_40528_1_10971_0','rand','8',''),
            ('0_40528_1_10972_0','rand','6',''),
            ('0_40528_1_10973_0','rand','4',''),
            ('0_40528_1_10974_0','rand','1980',''),
            ('0_40528_1_10975_0','rand','2175',''),
            ('0_40528_1_10976_0','rand','195',''),
            ('0_40528_1_10977_0','rand','49354',''),
            ('0_40528_1_10978_0','rand','91350',''),
            ('0_40528_1_10979_0','rand','41996',''),
            ('0_40528_1_10980_0','rand','75%',''),
            ('0_40528_1_10981_0','rand','6357.6','100'),
            ('0_40528_1_10982_0','rand','1.5','100'),
            ('0_40528_1_10983_0','rand','21750',''),
            ('0_40528_1_10984_0','rand','1846',''),
            ('0_40528_1_10985_0','rand','2101',''),
            ('0_40528_1_10986_0','rand','3065',''),
            ('0_40528_1_10987_0','rand','286',''),
            ('0_40528_1_10988_0','rand','80',''),
            ('0_40528_1_10989_0','rand','10556',''),
            ('0_40528_1_10990_0','rand','21750',''),
            ('0_40528_1_10991_0','rand','20',''),
            ('0_40528_1_10992_0','rand','2175',''),
            ('0_40528_2_10993_0','rand','0',''),
            ('0_40528_2_10994_0','rand','0',''),
            ('0_40528_2_10995_0','rand','0',''),
            ('0_40528_2_10996_0','rand','0',''),

            ('0_40529_1_10997_0','rand','1105',''),
            ('0_40529_1_10998_0','rand','2018/10/31',''),
            ('0_40529_1_10999_0','rand','A',''),
            ('0_40529_1_11000_0','rand','一级',''),
            ('0_40529_1_11001_0','rand','52',''),
            ('0_40529_1_11002_0','rand','3',''),
            ('0_40529_1_11003_0','rand','8',''),
            ('0_40529_1_11004_0','rand','6',''),
            ('0_40529_1_11005_0','rand','4',''),
            ('0_40529_1_11006_0','rand','2402',''),
            ('0_40529_1_11007_0','rand','2666',''),
            ('0_40529_1_11008_0','rand','264',''),
            ('0_40529_1_11009_0','rand','69354',''),
            ('0_40529_1_11010_0','rand','111972',''),
            ('0_40529_1_11011_0','rand','42618',''),
            ('0_40529_1_11012_0','rand','85%',''),
            ('0_40529_1_11013_0','rand','7057.6','100'),
            ('0_40529_1_11014_0','rand','1.3','100'),
            ('0_40529_1_11015_0','rand','26660',''),
            ('0_40529_1_11016_0','rand','2310',''),
            ('0_40529_1_11017_0','rand','2640',''),
            ('0_40529_1_11018_0','rand','3684',''),
            ('0_40529_1_11019_0','rand','364',''),
            ('0_40529_1_11020_0','rand','96',''),
            ('0_40529_1_11021_0','rand','12556',''),
            ('0_40529_1_11022_0','rand','26660',''),
            ('0_40529_1_11023_0','rand','24',''),
            ('0_40529_1_11024_0','rand','2666',''),
            ('0_40529_2_11025_0','rand','0',''),
            ('0_40529_2_11026_0','rand','0',''),
            ('0_40529_2_11027_0','rand','0',''),
            ('0_40529_2_11028_0','rand','0',''),

            ('0_40530_1_11029_0','rand','1470',''),
            ('0_40530_1_11030_0','rand','2017/10/31',''),
            ('0_40530_1_11031_0','rand','B',''),
            ('0_40530_1_11032_0','rand','二级',''),
            ('0_40530_1_11033_0','rand','50',''),
            ('0_40530_1_11034_0','rand','3',''),
            ('0_40530_1_11035_0','rand','8',''),
            ('0_40530_1_11036_0','rand','4',''),
            ('0_40530_1_11037_0','rand','4',''),
            ('0_40530_1_11038_0','rand','1877',''),
            ('0_40530_1_11039_0','rand','2141',''),
            ('0_40530_1_11040_0','rand','264',''),
            ('0_40530_1_11041_0','rand','49354',''),
            ('0_40530_1_11042_0','rand','89922',''),
            ('0_40530_1_11043_0','rand','40568',''),
            ('0_40530_1_11044_0','rand','77%',''),
            ('0_40530_1_11045_0','rand','6489.6','100'),
            ('0_40530_1_11046_0','rand','1.5','100'),
            ('0_40530_1_11047_0','rand','21410',''),
            ('0_40530_1_11048_0','rand','2310',''),
            ('0_40530_1_11049_0','rand','2640',''),
            ('0_40530_1_11050_0','rand','3684',''),
            ('0_40530_1_11051_0','rand','364',''),
            ('0_40530_1_11052_0','rand','80',''),
            ('0_40530_1_11053_0','rand','9964',''),
            ('0_40530_1_11054_0','rand','21410',''),
            ('0_40530_1_11055_0','rand','20',''),
            ('0_40530_1_11056_0','rand','2141',''),
            ('0_40530_2_11057_0','rand','0',''),
            ('0_40530_2_11058_0','rand','0',''),
            ('0_40530_2_11059_0','rand','0',''),
            ('0_40530_2_11060_0','rand','0',''),

            ('0_40531_1_11061_0','rand','2238',''),
            ('0_40531_1_11062_0','rand','2015/9/24',''),
            ('0_40531_1_11063_0','rand','B',''),
            ('0_40531_1_11064_0','rand','二级',''),
            ('0_40531_1_11065_0','rand','51',''),
            ('0_40531_1_11066_0','rand','3',''),
            ('0_40531_1_11067_0','rand','6',''),
            ('0_40531_1_11068_0','rand','4',''),
            ('0_40531_1_11069_0','rand','4',''),
            ('0_40531_1_11070_0','rand','1562',''),
            ('0_40531_1_11071_0','rand','1760',''),
            ('0_40531_1_11072_0','rand','198',''),
            ('0_40531_1_11073_0','rand','39354',''),
            ('0_40531_1_11074_0','rand','73920',''),
            ('0_40531_1_11075_0','rand','34566',''),
            ('0_40531_1_11076_0','rand','77%',''),
            ('0_40531_1_11077_0','rand','5957.6','100'),
            ('0_40531_1_11078_0','rand','1.5','100'),
            ('0_40531_1_11079_0','rand','17600',''),
            ('0_40531_1_11080_0','rand','1985',''),
            ('0_40531_1_11081_0','rand','2045',''),
            ('0_40531_1_11082_0','rand','3064',''),
            ('0_40531_1_11083_0','rand','276',''),
            ('0_40531_1_11084_0','rand','72',''),
            ('0_40531_1_11085_0','rand','9864',''),
            ('0_40531_1_11086_0','rand','17600',''),
            ('0_40531_1_11087_0','rand','18',''),
            ('0_40531_1_11088_0','rand','1760',''),
            ('0_40531_2_11089_0','rand','0',''),
            ('0_40531_2_11090_0','rand','0',''),
            ('0_40531_2_11091_0','rand','0',''),
            ('0_40531_2_11092_0','rand','0',''),

            ('0_40532_1_11093_0','rand','1811',''),
            ('0_40532_1_11094_0','rand','2016/11/24',''),
            ('0_40532_1_11095_0','rand','B',''),
            ('0_40532_1_11096_0','rand','二级',''),
            ('0_40532_1_11097_0','rand','51',''),
            ('0_40532_1_11098_0','rand','3',''),
            ('0_40532_1_11099_0','rand','6',''),
            ('0_40532_1_11100_0','rand','4',''),
            ('0_40532_1_11101_0','rand','4',''),
            ('0_40532_1_11102_0','rand','1562',''),
            ('0_40532_1_11103_0','rand','1760',''),
            ('0_40532_1_11104_0','rand','198',''),
            ('0_40532_1_11105_0','rand','39354',''),
            ('0_40532_1_11106_0','rand','73920',''),
            ('0_40532_1_11107_0','rand','34566',''),
            ('0_40532_1_11108_0','rand','77%',''),
            ('0_40532_1_11109_0','rand','5957.6','100'),
            ('0_40532_1_11110_0','rand','1.5','100'),
            ('0_40532_1_11111_0','rand','17600',''),
            ('0_40532_1_11112_0','rand','1985',''),
            ('0_40532_1_11113_0','rand','2045',''),
            ('0_40532_1_11114_0','rand','3064',''),
            ('0_40532_1_11115_0','rand','276',''),
            ('0_40532_1_11116_0','rand','72',''),
            ('0_40532_1_11117_0','rand','9864',''),
            ('0_40532_1_11118_0','rand','17600',''),
            ('0_40532_1_11119_0','rand','18',''),
            ('0_40532_1_11120_0','rand','1760',''),
            ('0_40532_2_11121_0','rand','0',''),
            ('0_40532_2_11122_0','rand','0',''),
            ('0_40532_2_11123_0','rand','0',''),
            ('0_40532_2_11124_0','rand','0',''),

            ('0_40533_1_11125_0','rand','726',''),
            ('0_40533_1_11126_0','rand','2016/11/14',''),
            ('0_40533_1_11127_0','rand','B',''),
            ('0_40533_1_11128_0','rand','二级',''),
            ('0_40533_1_11129_0','rand','56',''),
            ('0_40533_1_11130_0','rand','3',''),
            ('0_40533_1_11131_0','rand','6',''),
            ('0_40533_1_11132_0','rand','4',''),
            ('0_40533_1_11133_0','rand','4',''),
            ('0_40533_1_11134_0','rand','1972',''),
            ('0_40533_1_11135_0','rand','2160',''),
            ('0_40533_1_11136_0','rand','186',''),
            ('0_40533_1_11137_0','rand','46354',''),
            ('0_40533_1_11138_0','rand','90720',''),
            ('0_40533_1_11139_0','rand','44366',''),
            ('0_40533_1_11140_0','rand','79%',''),
            ('0_40533_1_11141_0','rand','6257.6','100'),
            ('0_40533_1_11142_0','rand','1.3','100'),
            ('0_40533_1_11143_0','rand','21600',''),
            ('0_40533_1_11144_0','rand','1964',''),
            ('0_40533_1_11145_0','rand','2036',''),
            ('0_40533_1_11146_0','rand','2894',''),
            ('0_40533_1_11147_0','rand','297',''),
            ('0_40533_1_11148_0','rand','80',''),
            ('0_40533_1_11149_0','rand','9635',''),
            ('0_40533_1_11150_0','rand','21600',''),
            ('0_40533_1_11151_0','rand','20',''),
            ('0_40533_1_11152_0','rand','2160',''),
            ('0_40533_2_11153_0','rand','0',''),
            ('0_40533_2_11154_0','rand','0',''),
            ('0_40533_2_11155_0','rand','0',''),
            ('0_40533_2_11156_0','rand','0',''),

            ('0_40534_1_11157_0','rand','726',''),
            ('0_40534_1_11158_0','rand','2016/11/14',''),
            ('0_40534_1_11159_0','rand','A',''),
            ('0_40534_1_11160_0','rand','一级',''),
            ('0_40534_1_11161_0','rand','64',''),
            ('0_40534_1_11162_0','rand','4',''),
            ('0_40534_1_11163_0','rand','8',''),
            ('0_40534_1_11164_0','rand','6',''),
            ('0_40534_1_11165_0','rand','4',''),
            ('0_40534_1_11166_0','rand','1940',''),
            ('0_40534_1_11167_0','rand','2126',''),
            ('0_40534_1_11168_0','rand','186',''),
            ('0_40534_1_11169_0','rand','46364',''),
            ('0_40534_1_11170_0','rand','89292',''),
            ('0_40534_1_11171_0','rand','42928',''),
            ('0_40534_1_11172_0','rand','79%',''),
            ('0_40534_1_11173_0','rand','6557.6','100'),
            ('0_40534_1_11174_0','rand','1.3','100'),
            ('0_40534_1_11175_0','rand','21260',''),
            ('0_40534_1_11176_0','rand','2014',''),
            ('0_40534_1_11177_0','rand','2264',''),
            ('0_40534_1_11178_0','rand','3085',''),
            ('0_40534_1_11179_0','rand','314',''),
            ('0_40534_1_11180_0','rand','80',''),
            ('0_40534_1_11181_0','rand','10345',''),
            ('0_40534_1_11182_0','rand','21260',''),
            ('0_40534_1_11183_0','rand','20',''),
            ('0_40534_1_11184_0','rand','2126',''),
            ('0_40534_2_11185_0','rand','0',''),
            ('0_40534_2_11186_0','rand','0',''),
            ('0_40534_2_11187_0','rand','0',''),
            ('0_40534_2_11188_0','rand','0','')

        ]

    def publish(self, vs):
        sv = {
            "value_source": "strategy",
            "values": vs
        }
        self.publisher.publisher_data(sv)

    def build_v(self, rid, v):
        return {
            "resource_id": rid,
            "value": v
        }


    def _gen_general(self):
        try:
            vs = []

            vs.append(self.build_v('0_40503_1_10243_0', '0'))
            vs.append(self.build_v('0_40503_1_10244_0', '0'))
            vs.append(self.build_v('0_40503_1_10245_0', '1'))
            vs.append(self.build_v('0_40503_1_10246_0', '6'))
            vs.append(self.build_v('0_40503_1_10247_0', '12'))
            vs.append(self.build_v('0_40503_1_10248_0', '19'))
            vs.append(self.build_v('0_40503_1_10249_0', '2'))
            vs.append(self.build_v('0_40503_2_10250_0', '0'))
            vs.append(self.build_v('0_40503_2_10251_0', '0'))
            vs.append(self.build_v('0_40503_2_10252_0', '0'))
            vs.append(self.build_v('0_40503_2_10253_0', '0'))
            vs.append(self.build_v('0_40503_1_10254_0', '56000'))
            vs.append(self.build_v('0_40503_1_10255_0', '420000'))
            vs.append(self.build_v('0_40503_1_10256_0', '6500'))
            vs.append(self.build_v('0_40503_1_10257_0', '33600'))
            vs.append(self.build_v('0_40503_1_10258_0', '268800'))
            vs.append(self.build_v('0_40503_1_10259_0', '5655'))
            vs.append(self.build_v('0_40503_1_10260_0', '60'))
            vs.append(self.build_v('0_40503_1_10264_0', '64'))
            vs.append(self.build_v('0_40503_1_10261_0', '87'))
            vs.append(self.build_v('0_40503_1_10262_0', '53'))
            vs.append(self.build_v('0_40503_1_10263_0', '13'))
            vs.append(self.build_v('0_40503_1_10265_0', '45'))
            vs.append(self.build_v('0_40503_1_10266_0', '89'))
            vs.append(self.build_v('0_40503_1_10267_0', '26.5'))
            vs.append(self.build_v('0_40503_1_10268_0', '6.5'))
            vs.append(self.build_v('0_40503_1_10269_0', '22.5'))
            vs.append(self.build_v('0_40503_1_10270_0', '44.5'))
            vs.append(self.build_v('0_40503_1_10271_0', '332800'))
            vs.append(self.build_v('0_40503_1_10272_0', '256000'))
            vs.append(self.build_v('0_40503_1_10273_0', '33280'))
            vs.append(self.build_v('0_40503_1_10274_0', '25600'))
            vs.append(self.build_v('0_40503_1_10275_0', '20'))
            vs.append(self.build_v('0_40503_1_10276_0', '6.5'))
            vs.append(self.build_v('0_40503_1_10277_0', '80'))
            vs.append(self.build_v('0_40503_1_10278_0', '80'))
            vs.append(self.build_v('0_40503_1_10279_0', '3600'))

            self.publish(vs)
        except Exception as ee:
            print ee

    def _gen_capacity(self):
        try:
            vs = []

            vs.append(self.build_v('0_40504_1_10280_0', '88'))
            vs.append(self.build_v('0_40504_1_10281_0', '93'))
            vs.append(self.build_v('0_40504_1_10282_0', '98'))
            vs.append(self.build_v('0_40504_1_10283_0', '88'))
            vs.append(self.build_v('0_40504_2_10284_0', '0'))
            vs.append(self.build_v('0_40504_1_10285_0', '1448.88'))
            vs.append(self.build_v('0_40504_1_10286_0', '1348.88'))
            vs.append(self.build_v('0_40504_1_10287_0', '1540'))
            vs.append(self.build_v('0_40504_1_10288_0', '1600'))
            vs.append(self.build_v('0_40504_1_10289_0', '100'))
            vs.append(self.build_v('0_40504_1_10290_0', '100'))
            vs.append(self.build_v('0_40504_1_10291_0', '120'))
            vs.append(self.build_v('0_40504_1_10292_0', '15'))
            vs.append(self.build_v('0_40504_1_10293_0', '40'))
            vs.append(self.build_v('0_40504_1_10294_0', '45'))
            vs.append(self.build_v('0_40504_1_10295_0', '60'))
            vs.append(self.build_v('0_40504_1_10296_0', '70'))
            vs.append(self.build_v('0_40504_1_10297_0', '40'))
            vs.append(self.build_v('0_40504_1_10298_0', '45'))
            vs.append(self.build_v('0_40504_1_10299_0', '60'))
            vs.append(self.build_v('0_40504_1_10300_0', '70'))
            vs.append(self.build_v('0_40504_1_10301_0', '352'))
            vs.append(self.build_v('0_40504_1_10302_0', '400'))
            vs.append(self.build_v('0_40504_1_10303_0', '275'))
            vs.append(self.build_v('0_40504_1_10304_0', '215'))
            vs.append(self.build_v('0_40504_1_10305_0', '78.1'))
            vs.append(self.build_v('0_40504_1_10306_0', '78.1'))
            vs.append(self.build_v('0_40504_1_10307_0', '1237'))
            vs.append(self.build_v('0_40504_1_10308_0', '1540'))
            vs.append(self.build_v('0_40504_1_10309_0', '1041.1'))
            vs.append(self.build_v('0_40504_1_10310_0', '1600'))
            vs.append(self.build_v('0_40504_1_10311_0', '100'))
            vs.append(self.build_v('0_40504_1_10312_0', '100'))
            vs.append(self.build_v('0_40504_1_10313_0', '20'))
            vs.append(self.build_v('0_40504_1_10314_0', '20'))
            vs.append(self.build_v('0_40504_1_10315_0', '500'))

            self.publish(vs)
        except Exception as ee:
            print ee

    def _gen_efficiency(self):
        try:
            vs = []

            vs.append(self.build_v('0_40505_1_10319_0', '231800'))
            vs.append(self.build_v('0_40505_1_10320_0', '80'))
            vs.append(self.build_v('0_40505_1_10321_0', '1800'))
            vs.append(self.build_v('0_40505_1_10322_0', '28'))
            vs.append(self.build_v('0_40505_1_10323_0', '8'))
            vs.append(self.build_v('0_40505_1_10324_0', '2'))
            vs.append(self.build_v('0_40505_1_10325_0', '20'))
            vs.append(self.build_v('0_40505_1_10326_0', '6'))
            vs.append(self.build_v('0_40505_1_10327_0', '22'))
            vs.append(self.build_v('0_40505_1_10328_0', '52'))
            vs.append(self.build_v('0_40505_1_10329_0', '29.7'))
            vs.append(self.build_v('0_40505_1_10330_0', '70.2'))
            vs.append(self.build_v('0_40505_1_10331_0', '92'))
            vs.append(self.build_v('0_40505_1_10332_0', '52'))
            vs.append(self.build_v('0_40505_1_10333_0', '51'))
            vs.append(self.build_v('0_40505_1_10334_0', '22'))
            vs.append(self.build_v('0_40505_1_10335_0', '33.4'))
            vs.append(self.build_v('0_40505_1_10336_0', '18.91'))
            vs.append(self.build_v('0_40505_1_10337_0', '18.5'))
            vs.append(self.build_v('0_40505_1_10338_0', '8'))

            self.publish(vs)
        except Exception as ee:
            print ee

    def rand(self, base, delta):
        if base == '':
            base = 0
        if delta == '':
            delta = 0
        return str(round(float(base) + random.random()*float(delta), 2))

    def sumup(self, rid, base, delta):
        if base == '':
            base = 0
        if delta == '':
            delta = 0
        if delta == '':
            delta = 0
        old = self.rtdb.get(rid)
        return str(round(float(old.get('real_value') or base) + random.random()*float(delta), 2))

    def _build(self, rule):
        if rule[1] == 'rand':
            return self.build_v(rule[0], self.rand(rule[2], rule[3]))
        if rule[1] == 'sum':
            return self.build_v(rule[0], self.sumup(rule[0], rule[2], rule[3]))

    def gen(self):
        try:
            vs = []
            for r in self._rules:
                try:
                    vs.append(self._build(r))
                except Exception as ee:
                    print ee
            self.publish(vs)
        except Exception as ee:
            print ee


if __name__ == "__main__":
    s = Simulator()
    s.gen()
    #r = Rtdb()
    #r.get('0_40505_1_10319_0')
    #print rand(100, 3)
    #print rand("100", 3)
    #print rand(100, "3")
    #print rand("100", "3")
    #print rand("100.0", "3")
