{
  "version": 3,
  "sources": ["browser-route-module:E:\\Workspace\\jsonhero-web-main\\app\\routes\\new.tsx?browser", "../../../app/routes/new.tsx"],
  "sourcesContent": ["export * from \"E:\\\\Workspace\\\\jsonhero-web-main\\\\app\\\\routes\\\\new.tsx\";", "import { json, LoaderFunction, redirect } from \"remix\";\nimport invariant from \"tiny-invariant\";\nimport { sendEvent } from \"~/graphJSON.server\";\nimport {\n  createFromRawJson,\n  createFromUrl,\n  CreateJsonOptions,\n} from \"~/jsonDoc.server\";\n\nexport let loader: LoaderFunction = async ({ request, context }) => {\n  const url = new URL(request.url);\n  const jsonUrl = url.searchParams.get(\"url\");\n  const base64EncodedJson = url.searchParams.get(\"j\");\n  const ttl = url.searchParams.get(\"ttl\");\n  const readOnly = url.searchParams.get(\"readonly\");\n  const title = url.searchParams.get(\"title\");\n  const injest = url.searchParams.get(\"injest\");\n\n  if (!jsonUrl && !base64EncodedJson) {\n    return redirect(\"/\");\n  }\n\n  const options: CreateJsonOptions = {};\n\n  if (typeof ttl === \"string\") {\n    invariant(ttl.match(/^\\d+$/), \"ttl must be a number\");\n\n    options.ttl = parseInt(ttl, 10);\n\n    invariant(options.ttl >= 60, \"ttl must be at least 60 seconds\");\n  }\n\n  if (typeof readOnly === \"string\") {\n    options.readOnly = readOnly === \"true\";\n  }\n\n  if (typeof injest === \"string\") {\n    options.injest = injest === \"true\";\n  }\n\n  if (jsonUrl) {\n    const jsonURL = new URL(jsonUrl);\n\n    invariant(jsonURL, \"url must be a valid URL\");\n\n    const doc = await createFromUrl(jsonURL, title ?? jsonURL.href, options);\n\n    context.waitUntil(\n      sendEvent({\n        type: \"create\",\n        from: \"url\",\n        hostname: jsonURL.hostname,\n        id: doc.id,\n        source: url.searchParams.get(\"utm_source\") ?? url.hostname,\n      })\n    );\n\n    return redirect(`/j/${doc.id}`);\n  }\n\n  if (base64EncodedJson) {\n    const doc = await createFromRawJson(\n      title ?? \"Untitled\",\n      atob(base64EncodedJson),\n      options\n    );\n\n    context.waitUntil(\n      sendEvent({\n        type: \"create\",\n        from: \"base64\",\n        id: doc.id,\n        source: url.searchParams.get(\"utm_source\"),\n      })\n    );\n\n    return redirect(`/j/${doc.id}`);\n  }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;;;ACAA;AAEA,uBAA0B;AAC1B,qBAIO;AAEA,IAAI,SAAyB,OAAO,EAAE,SAAS,cAAc;AATpE;AAUE,QAAM,MAAM,IAAI,IAAI,QAAQ;AAC5B,QAAM,UAAU,IAAI,aAAa,IAAI;AACrC,QAAM,oBAAoB,IAAI,aAAa,IAAI;AAC/C,QAAM,MAAM,IAAI,aAAa,IAAI;AACjC,QAAM,WAAW,IAAI,aAAa,IAAI;AACtC,QAAM,QAAQ,IAAI,aAAa,IAAI;AACnC,QAAM,SAAS,IAAI,aAAa,IAAI;AAEpC,MAAI,CAAC,WAAW,CAAC,mBAAmB;AAClC,WAAO,SAAS;AAAA;AAGlB,QAAM,UAA6B;AAEnC,MAAI,OAAO,QAAQ,UAAU;AAC3B,cAAU,IAAI,MAAM,UAAU;AAE9B,YAAQ,MAAM,SAAS,KAAK;AAE5B,cAAU,QAAQ,OAAO,IAAI;AAAA;AAG/B,MAAI,OAAO,aAAa,UAAU;AAChC,YAAQ,WAAW,aAAa;AAAA;AAGlC,MAAI,OAAO,WAAW,UAAU;AAC9B,YAAQ,SAAS,WAAW;AAAA;AAG9B,MAAI,SAAS;AACX,UAAM,UAAU,IAAI,IAAI;AAExB,cAAU,SAAS;AAEnB,UAAM,MAAM,MAAM,kCAAc,SAAS,wBAAS,QAAQ,MAAM;AAEhE,YAAQ,UACN,gCAAU;AAAA,MACR,MAAM;AAAA,MACN,MAAM;AAAA,MACN,UAAU,QAAQ;AAAA,MAClB,IAAI,IAAI;AAAA,MACR,QAAQ,UAAI,aAAa,IAAI,kBAArB,YAAsC,IAAI;AAAA;AAItD,WAAO,SAAS,MAAM,IAAI;AAAA;AAG5B,MAAI,mBAAmB;AACrB,UAAM,MAAM,MAAM,sCAChB,wBAAS,YACT,KAAK,oBACL;AAGF,YAAQ,UACN,gCAAU;AAAA,MACR,MAAM;AAAA,MACN,MAAM;AAAA,MACN,IAAI,IAAI;AAAA,MACR,QAAQ,IAAI,aAAa,IAAI;AAAA;AAIjC,WAAO,SAAS,MAAM,IAAI;AAAA;AAAA;",
  "names": []
}
