{
  "version": 3,
  "sources": ["browser-route-module:E:\\Workspace\\jsonhero-web-main\\app\\routes\\api\\create[.json].ts?browser", "../../../../app/routes/api/create[.json].ts"],
  "sourcesContent": ["export * from \"E:\\\\Workspace\\\\jsonhero-web-main\\\\app\\\\routes\\\\api\\\\create[.json].ts\";", "import { ActionFunction, json, LoaderFunction } from \"remix\";\nimport invariant from \"tiny-invariant\";\nimport { sendEvent } from \"~/graphJSON.server\";\nimport { createFromRawJson, CreateJsonOptions } from \"~/jsonDoc.server\";\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  if (request.method === \"OPTIONS\") {\n    return new Response(null, {\n      status: 204,\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Methods\": \"POST\",\n        \"Access-Control-Allow-Headers\": \"Content-Type\",\n        \"Access-Control-Max-Age\": \"86400\",\n      },\n    });\n  }\n};\n\nexport const action: ActionFunction = async ({ request, context }) => {\n  const url = new URL(request.url);\n\n  const { title, content, ttl, readOnly } = await request.json();\n\n  if (!title || !content) {\n    return json({ message: \"Missing title or content\" }, 400);\n  }\n\n  invariant(typeof title === \"string\", \"title must be a string\");\n  invariant(content !== null, \"content cannot be null\");\n\n  const source = url.searchParams.get(\"utm_source\");\n\n  const options: CreateJsonOptions = {};\n\n  if (typeof ttl === \"number\") {\n    if (ttl < 60) {\n      return json({ message: \"ttl must be at least 60 seconds\" }, 400);\n    }\n\n    options.ttl = ttl;\n  }\n\n  if (typeof readOnly === \"boolean\") {\n    options.readOnly = readOnly;\n  }\n\n  const doc = await createFromRawJson(title, JSON.stringify(content), options);\n  url.pathname = `/j/${doc.id}`;\n\n  url.searchParams.delete(\"utm_source\");\n\n  context.waitUntil(\n    sendEvent({\n      type: \"create\",\n      from: \"url\",\n      hostname: url.hostname,\n      id: doc.id,\n      source,\n    })\n  );\n\n  return json(\n    { id: doc.id, title, location: url.toString() },\n    {\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n    }\n  );\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;;;ACAA;AAEA,uBAA0B;AAC1B,qBAAqD;AAE9C,IAAM,SAAyB,OAAO,EAAE,cAAc;AAC3D,MAAI,QAAQ,WAAW,WAAW;AAChC,WAAO,IAAI,SAAS,MAAM;AAAA,MACxB,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,+BAA+B;AAAA,QAC/B,gCAAgC;AAAA,QAChC,gCAAgC;AAAA,QAChC,0BAA0B;AAAA;AAAA;AAAA;AAAA;AAM3B,IAAM,SAAyB,OAAO,EAAE,SAAS,cAAc;AACpE,QAAM,MAAM,IAAI,IAAI,QAAQ;AAE5B,QAAM,EAAE,OAAO,SAAS,KAAK,aAAa,MAAM,QAAQ;AAExD,MAAI,CAAC,SAAS,CAAC,SAAS;AACtB,WAAO,KAAK,EAAE,SAAS,8BAA8B;AAAA;AAGvD,YAAU,OAAO,UAAU,UAAU;AACrC,YAAU,YAAY,MAAM;AAE5B,QAAM,SAAS,IAAI,aAAa,IAAI;AAEpC,QAAM,UAA6B;AAEnC,MAAI,OAAO,QAAQ,UAAU;AAC3B,QAAI,MAAM,IAAI;AACZ,aAAO,KAAK,EAAE,SAAS,qCAAqC;AAAA;AAG9D,YAAQ,MAAM;AAAA;AAGhB,MAAI,OAAO,aAAa,WAAW;AACjC,YAAQ,WAAW;AAAA;AAGrB,QAAM,MAAM,MAAM,sCAAkB,OAAO,KAAK,UAAU,UAAU;AACpE,MAAI,WAAW,MAAM,IAAI;AAEzB,MAAI,aAAa,OAAO;AAExB,UAAQ,UACN,gCAAU;AAAA,IACR,MAAM;AAAA,IACN,MAAM;AAAA,IACN,UAAU,IAAI;AAAA,IACd,IAAI,IAAI;AAAA,IACR;AAAA;AAIJ,SAAO,KACL,EAAE,IAAI,IAAI,IAAI,OAAO,UAAU,IAAI,cACnC;AAAA,IACE,SAAS;AAAA,MACP,+BAA+B;AAAA;AAAA;AAAA;",
  "names": []
}
