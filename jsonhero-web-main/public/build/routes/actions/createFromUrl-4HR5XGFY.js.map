{
  "version": 3,
  "sources": ["empty-module:../../services/toast.server", "browser-route-module:E:\\Workspace\\jsonhero-web-main\\app\\routes\\actions\\createFromUrl.ts?browser", "../../../../app/routes/actions/createFromUrl.ts"],
  "sourcesContent": ["module.exports = {};", "export * from \"E:\\\\Workspace\\\\jsonhero-web-main\\\\app\\\\routes\\\\actions\\\\createFromUrl.ts\";", "import { redirect } from \"remix\";\nimport type { ActionFunction, LoaderFunction } from \"remix\";\nimport invariant from \"tiny-invariant\";\nimport { createFromUrl, createFromUrlOrRawJson } from \"~/jsonDoc.server\";\nimport { sendEvent } from \"~/graphJSON.server\";\nimport {\n  commitSession,\n  getSession,\n  setErrorMessage,\n} from \"../../services/toast.server\";\n\ntype CreateFromUrlError = {\n  jsonUrl?: boolean;\n};\n\nexport let action: ActionFunction = async ({ request, context }) => {\n  const formData = await request.formData();\n  const toastCookie = await getSession(request.headers.get(\"cookie\"));\n  const jsonUrl = formData.get(\"jsonUrl\");\n  const title = formData.get(\"title\") as string;\n\n  const errors: CreateFromUrlError = {};\n  if (!jsonUrl) errors.jsonUrl = true;\n\n  if (Object.keys(errors).length) {\n    return errors;\n  }\n\n  invariant(typeof jsonUrl === \"string\", \"jsonUrl must be a string\");\n\n  try {\n    const doc = await createFromUrlOrRawJson(jsonUrl, title);\n\n    if (!doc) {\n      setErrorMessage(\n        toastCookie,\n        \"Unknown error\",\n        \"Could not create document. Please try again.\"\n      );\n\n      return redirect(\"/\", {\n        headers: { \"Set-Cookie\": await commitSession(toastCookie) },\n      });\n    }\n\n    const requestUrl = new URL(request.url);\n\n    context.waitUntil(\n      sendEvent({\n        type: \"create\",\n        from: \"urlOrJson\",\n        id: doc.id,\n        source:\n          requestUrl.searchParams.get(\"utm_source\") ?? requestUrl.hostname,\n      })\n    );\n\n    return redirect(`/j/${doc.id}`);\n  } catch (e) {\n    if (e instanceof Error) {\n      setErrorMessage(toastCookie, e.message, \"Something went wrong\");\n    } else {\n      setErrorMessage(toastCookie, \"Unknown error\", \"Something went wrong\");\n    }\n\n    return redirect(\"/\", {\n      headers: { \"Set-Cookie\": await commitSession(toastCookie) },\n    });\n  }\n};\n\nexport let loader: LoaderFunction = async ({ request, context }) => {\n  const url = new URL(request.url);\n  const jsonUrl = url.searchParams.get(\"jsonUrl\");\n\n  if (!jsonUrl) {\n    return redirect(\"/\");\n  }\n\n  const jsonURL = new URL(jsonUrl);\n\n  invariant(jsonURL, \"jsonUrl must be a valid URL\");\n\n  const doc = await createFromUrl(jsonURL, jsonURL.href);\n\n  context.waitUntil(\n    sendEvent({\n      type: \"create\",\n      from: \"url\",\n      hostname: jsonURL.hostname,\n      id: doc.id,\n      source: url.searchParams.get(\"utm_source\") ?? url.hostname,\n    })\n  );\n\n  return redirect(`/j/${doc.id}`);\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,WAAO,UAAU;AAAA;AAAA;;;ACAjB;;;ACAA;AAGA,qBAAsD;AACtD,uBAA0B;AAC1B,mBAIO;AAMA,IAAI,SAAyB,OAAO,EAAE,SAAS,cAAc;AAfpE;AAgBE,QAAM,WAAW,MAAM,QAAQ;AAC/B,QAAM,cAAc,MAAM,6BAAW,QAAQ,QAAQ,IAAI;AACzD,QAAM,UAAU,SAAS,IAAI;AAC7B,QAAM,QAAQ,SAAS,IAAI;AAE3B,QAAM,SAA6B;AACnC,MAAI,CAAC;AAAS,WAAO,UAAU;AAE/B,MAAI,OAAO,KAAK,QAAQ,QAAQ;AAC9B,WAAO;AAAA;AAGT,YAAU,OAAO,YAAY,UAAU;AAEvC,MAAI;AACF,UAAM,MAAM,MAAM,2CAAuB,SAAS;AAElD,QAAI,CAAC,KAAK;AACR,wCACE,aACA,iBACA;AAGF,aAAO,SAAS,KAAK;AAAA,QACnB,SAAS,EAAE,cAAc,MAAM,gCAAc;AAAA;AAAA;AAIjD,UAAM,aAAa,IAAI,IAAI,QAAQ;AAEnC,YAAQ,UACN,gCAAU;AAAA,MACR,MAAM;AAAA,MACN,MAAM;AAAA,MACN,IAAI,IAAI;AAAA,MACR,QACE,iBAAW,aAAa,IAAI,kBAA5B,YAA6C,WAAW;AAAA;AAI9D,WAAO,SAAS,MAAM,IAAI;AAAA,WACnB,GAAP;AACA,QAAI,aAAa,OAAO;AACtB,wCAAgB,aAAa,EAAE,SAAS;AAAA,WACnC;AACL,wCAAgB,aAAa,iBAAiB;AAAA;AAGhD,WAAO,SAAS,KAAK;AAAA,MACnB,SAAS,EAAE,cAAc,MAAM,gCAAc;AAAA;AAAA;AAAA;AAK5C,IAAI,SAAyB,OAAO,EAAE,SAAS,cAAc;AAvEpE;AAwEE,QAAM,MAAM,IAAI,IAAI,QAAQ;AAC5B,QAAM,UAAU,IAAI,aAAa,IAAI;AAErC,MAAI,CAAC,SAAS;AACZ,WAAO,SAAS;AAAA;AAGlB,QAAM,UAAU,IAAI,IAAI;AAExB,YAAU,SAAS;AAEnB,QAAM,MAAM,MAAM,kCAAc,SAAS,QAAQ;AAEjD,UAAQ,UACN,gCAAU;AAAA,IACR,MAAM;AAAA,IACN,MAAM;AAAA,IACN,UAAU,QAAQ;AAAA,IAClB,IAAI,IAAI;AAAA,IACR,QAAQ,UAAI,aAAa,IAAI,kBAArB,YAAsC,IAAI;AAAA;AAItD,SAAO,SAAS,MAAM,IAAI;AAAA;",
  "names": []
}
